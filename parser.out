Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> gotomain PROGRAMA addDir ID SEMI programa2
Rule 2     programa2 -> atributos programa2
Rule 3     programa2 -> programa3
Rule 4     programa3 -> metodos programa3
Rule 5     programa3 -> programa4
Rule 6     programa4 -> setmainloc principal
Rule 7     atributos -> ATRIBUTOS addDir var
Rule 8     metodos -> METODOS funciones
Rule 9     principal -> PRINCIPAL LPAREN estatutos principal2
Rule 10    principal2 -> estatutos principal2
Rule 11    principal2 -> RPAREN
Rule 12    funciones -> tipo funciones2
Rule 13    funciones -> VOID funciones2
Rule 14    funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
Rule 15    funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3
Rule 16    funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3
Rule 17    funciones3 -> estatutos RBRACES addDir funciones
Rule 18    funciones3 -> estatutos RBRACES addDir
Rule 19    funciones3 -> estatutos funciones3
Rule 20    parametros -> tipo ID setCurrentID addValueVarT newParamType COMMA parametros
Rule 21    parametros -> tipo ID setCurrentID addValueVarT newParamType
Rule 22    retornar -> RETURN returnFlag LPAREN retornar2
Rule 23    retornar2 -> exp cuadRetornar COMMA retornar2
Rule 24    retornar2 -> exp cuadRetornar RPAREN
Rule 25    var -> tipo COLON var2
Rule 26    var2 -> ID setCurrentID addValueVarT var3
Rule 27    var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4
Rule 28    var3 -> COMMA var2
Rule 29    var3 -> SEMI var
Rule 30    var3 -> SEMI
Rule 31    var4 -> RBRACKET cerrarNodes var3
Rule 32    var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3
Rule 33    tipo -> INT
Rule 34    tipo -> FLOAT
Rule 35    tipo -> CHAR
Rule 36    tipo -> BOOL
Rule 37    exp -> texp checarexp
Rule 38    exp -> exp addOL exp
Rule 39    texp -> gexp checarexp
Rule 40    texp -> texp addOL texp
Rule 41    gexp -> mexp checarexp
Rule 42    gexp -> gexp gexp2 gexp
Rule 43    gexp2 -> LT addO
Rule 44    gexp2 -> LE addO
Rule 45    gexp2 -> GT addO
Rule 46    gexp2 -> GE addO
Rule 47    gexp2 -> EQ addO
Rule 48    gexp2 -> NE addO
Rule 49    mexp -> t checarexp
Rule 50    mexp -> mexp mexp2
Rule 51    mexp2 -> PLUS addO mexp
Rule 52    mexp2 -> MINUS addO mexp
Rule 53    t -> f checarexp
Rule 54    t -> t t2
Rule 55    t2 -> MULT addO t
Rule 56    t2 -> DIV addO t
Rule 57    t2 -> MOD addO t
Rule 58    f -> LPAREN addFakeBottom exp RPAREN popFakeBottom
Rule 59    f -> CTE_I addIntType
Rule 60    f -> CTE_F addFloatType
Rule 61    f -> CTE_S addCharType
Rule 62    f -> TRUE addBoolType
Rule 63    f -> FALSE addBoolType
Rule 64    f -> llamada
Rule 65    f -> ID
Rule 66    f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
Rule 67    f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom
Rule 68    f2 -> RBRACKET crearCuadB popFakeBottom
Rule 69    estatutos -> estatutos2 estatutos
Rule 70    estatutos -> estatutos2
Rule 71    estatutos2 -> asigna
Rule 72    estatutos2 -> llamada
Rule 73    estatutos2 -> lee
Rule 74    estatutos2 -> escribe
Rule 75    estatutos2 -> condicion
Rule 76    estatutos2 -> ciclow
Rule 77    estatutos2 -> ciclof
Rule 78    estatutos2 -> funciones
Rule 79    estatutos2 -> retornar
Rule 80    asigna -> ID EQUALS push_id exp SEMI
Rule 81    asigna -> ID EQUALS push_id lee SEMI
Rule 82    asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
Rule 83    llamada -> ID callFunc LPAREN exp genParameter llamada2
Rule 84    llamada2 -> COMMA paramCounter exp genParameter llamada2
Rule 85    llamada2 -> verLastParam RPAREN
Rule 86    lee -> LEE LPAREN cuadlee RPAREN
Rule 87    escribe -> ESCRIBIR LPAREN exp cuadprint escribe2
Rule 88    escribe2 -> COMMA exp cuadprint escribe2
Rule 89    escribe2 -> RPAREN
Rule 90    condicion -> IF condicion2
Rule 91    condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto
Rule 92    condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto
Rule 93    condicion3 -> LBRACES estatutos RBRACES
Rule 94    ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
Rule 95    ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
Rule 96    ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
Rule 97    addDir -> <empty>
Rule 98    setCurrentID -> <empty>
Rule 99    addValueVarT -> <empty>
Rule 100   addFakeBottom -> <empty>
Rule 101   popFakeBottom -> <empty>
Rule 102   addO -> <empty>
Rule 103   addOL -> LOR
Rule 104   addOL -> LAND
Rule 105   checarexp -> <empty>
Rule 106   addIntType -> <empty>
Rule 107   addFloatType -> <empty>
Rule 108   addCharType -> <empty>
Rule 109   addBoolType -> <empty>
Rule 110   push_id -> <empty>
Rule 111   gotomain -> <empty>
Rule 112   setmainloc -> <empty>
Rule 113   cuadprint -> <empty>
Rule 114   cuadlee -> <empty>
Rule 115   returnFlag -> <empty>
Rule 116   cuadRetornar -> <empty>
Rule 117   genGTF -> <empty>
Rule 118   genGT -> <empty>
Rule 119   fillGoto -> <empty>
Rule 120   storeWhile -> <empty>
Rule 121   genDoWhile -> <empty>
Rule 122   fillWhile -> <empty>
Rule 123   addForId -> <empty>
Rule 124   genFor -> <empty>
Rule 125   compFor -> <empty>
Rule 126   actFor -> <empty>
Rule 127   newParamType -> <empty>
Rule 128   addParamCount -> <empty>
Rule 129   genParameter -> <empty>
Rule 130   addContF -> <empty>
Rule 131   callFunc -> <empty>
Rule 132   paramCounter -> <empty>
Rule 133   verLastParam -> <empty>
Rule 134   setL -> <empty>
Rule 135   newArray -> <empty>
Rule 136   cerrarNodes -> <empty>
Rule 137   crearCuadA -> <empty>
Rule 138   crearCuadB -> <empty>
Rule 139   agregarVar -> <empty>
Rule 140   verifyAEx -> <empty>
Rule 141   updateDim -> <empty>
Rule 142   increaseDim -> <empty>

Terminals, with rules where they appear

ATRIBUTOS            : 7
BOOL                 : 36
CHAR                 : 35
COLON                : 25
COMMA                : 20 23 28 32 67 84 88
CTE_F                : 60
CTE_I                : 27 27 32 32 59
CTE_S                : 61
DIV                  : 56
DO                   : 94 95 96
ELSE                 : 91
EQ                   : 47
EQUALS               : 80 81 82 96
ESCRIBIR             : 87
FALSE                : 63
FLOAT                : 34
FOR                  : 96
FUNCION              : 14 15 16
GE                   : 46
GT                   : 45
ID                   : 1 14 15 16 20 21 26 27 65 66 80 81 82 83 96
IF                   : 90
INT                  : 33
LAND                 : 104
LBRACES              : 14 15 16 93 94 95 96
LBRACKET             : 27 66 82
LE                   : 44
LEE                  : 86
LOR                  : 103
LPAREN               : 9 14 15 16 22 58 83 86 87 91 92 94 95
LT                   : 43
METODOS              : 8
MINUS                : 52
MOD                  : 57
MULT                 : 55
NE                   : 48
PLUS                 : 51
PRINCIPAL            : 9
PROGRAMA             : 1
RANGE                : 27 32
RBRACES              : 17 18 93 94 95 96
RBRACKET             : 31 32 67 68
RETURN               : 22
RPAREN               : 11 14 15 16 24 58 85 86 89 91 92 94 95
SEMI                 : 1 29 30 80 81 82
TO                   : 96
TRUE                 : 62
VOID                 : 13
WHILE                : 94 95
error                : 

Nonterminals, with rules where they appear

actFor               : 96
addBoolType          : 62 63
addCharType          : 61
addContF             : 14 15 16
addDir               : 1 7 14 14 15 15 16 16 17 18
addFakeBottom        : 58 66 82
addFloatType         : 60
addForId             : 96
addIntType           : 59
addO                 : 43 44 45 46 47 48 51 52 55 56 57
addOL                : 38 40
addParamCount        : 14 15 16
addValueVarT         : 20 21 26 27
agregarVar           : 66 82
asigna               : 71
atributos            : 2 14
callFunc             : 83
cerrarNodes          : 31 32
checarexp            : 37 39 41 49 53
ciclof               : 77
ciclow               : 76
compFor              : 96
condicion            : 75
condicion2           : 90
condicion3           : 91 91 92
crearCuadA           : 66 67 82
crearCuadB           : 67 68
cuadRetornar         : 23 24
cuadlee              : 86
cuadprint            : 87 88
escribe              : 74
escribe2             : 87 88
estatutos            : 9 10 17 18 19 69 93 94 95 96
estatutos2           : 69 70
exp                  : 23 24 38 38 58 66 67 80 82 82 83 84 87 88 91 92 94 95 96 96
f                    : 53
f2                   : 66 82
fillGoto             : 91 92
fillWhile            : 94
funciones            : 8 17 78
funciones2           : 12 13
funciones3           : 14 15 16 19
genDoWhile           : 95
genFor               : 96
genGT                : 91
genGTF               : 91 92 94
genParameter         : 83 84
gexp                 : 39 42 42
gexp2                : 42
gotomain             : 1
increaseDim          : 32
lee                  : 73 81
llamada              : 64 72
llamada2             : 83 84
metodos              : 4
mexp                 : 41 50 51 52
mexp2                : 50
newArray             : 27
newParamType         : 20 21
paramCounter         : 84
parametros           : 14 15 16 20
popFakeBottom        : 58 67 68
principal            : 6
principal2           : 9 10
programa             : 0
programa2            : 1 2
programa3            : 3 4
programa4            : 5
push_id              : 80 81 82
retornar             : 79
retornar2            : 22 23
returnFlag           : 22
setCurrentID         : 20 21 26 27
setL                 : 27 27 32 32
setmainloc           : 6
storeWhile           : 94 95
t                    : 49 54 55 56 57
t2                   : 54
texp                 : 37 40 40
tipo                 : 12 20 21 25
updateDim            : 67
var                  : 7 16 29
var2                 : 25 28
var3                 : 26 31 32
var4                 : 27
verLastParam         : 85
verifyAEx            : 66 82

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . gotomain PROGRAMA addDir ID SEMI programa2
    (111) gotomain -> .

    PROGRAMA        reduce using rule 111 (gotomain -> .)

    programa                       shift and go to state 1
    gotomain                       shift and go to state 2

state 1

    (0) S' -> programa .



state 2

    (1) programa -> gotomain . PROGRAMA addDir ID SEMI programa2

    PROGRAMA        shift and go to state 3


state 3

    (1) programa -> gotomain PROGRAMA . addDir ID SEMI programa2
    (97) addDir -> .

    ID              reduce using rule 97 (addDir -> .)

    addDir                         shift and go to state 4

state 4

    (1) programa -> gotomain PROGRAMA addDir . ID SEMI programa2

    ID              shift and go to state 5


state 5

    (1) programa -> gotomain PROGRAMA addDir ID . SEMI programa2

    SEMI            shift and go to state 6


state 6

    (1) programa -> gotomain PROGRAMA addDir ID SEMI . programa2
    (2) programa2 -> . atributos programa2
    (3) programa2 -> . programa3
    (7) atributos -> . ATRIBUTOS addDir var
    (4) programa3 -> . metodos programa3
    (5) programa3 -> . programa4
    (8) metodos -> . METODOS funciones
    (6) programa4 -> . setmainloc principal
    (112) setmainloc -> .

    ATRIBUTOS       shift and go to state 10
    METODOS         shift and go to state 13
    PRINCIPAL       reduce using rule 112 (setmainloc -> .)

    programa2                      shift and go to state 7
    atributos                      shift and go to state 8
    programa3                      shift and go to state 9
    metodos                        shift and go to state 11
    programa4                      shift and go to state 12
    setmainloc                     shift and go to state 14

state 7

    (1) programa -> gotomain PROGRAMA addDir ID SEMI programa2 .

    $end            reduce using rule 1 (programa -> gotomain PROGRAMA addDir ID SEMI programa2 .)


state 8

    (2) programa2 -> atributos . programa2
    (2) programa2 -> . atributos programa2
    (3) programa2 -> . programa3
    (7) atributos -> . ATRIBUTOS addDir var
    (4) programa3 -> . metodos programa3
    (5) programa3 -> . programa4
    (8) metodos -> . METODOS funciones
    (6) programa4 -> . setmainloc principal
    (112) setmainloc -> .

    ATRIBUTOS       shift and go to state 10
    METODOS         shift and go to state 13
    PRINCIPAL       reduce using rule 112 (setmainloc -> .)

    atributos                      shift and go to state 8
    programa2                      shift and go to state 15
    programa3                      shift and go to state 9
    metodos                        shift and go to state 11
    programa4                      shift and go to state 12
    setmainloc                     shift and go to state 14

state 9

    (3) programa2 -> programa3 .

    $end            reduce using rule 3 (programa2 -> programa3 .)


state 10

    (7) atributos -> ATRIBUTOS . addDir var
    (97) addDir -> .

    INT             reduce using rule 97 (addDir -> .)
    FLOAT           reduce using rule 97 (addDir -> .)
    CHAR            reduce using rule 97 (addDir -> .)
    BOOL            reduce using rule 97 (addDir -> .)

    addDir                         shift and go to state 16

state 11

    (4) programa3 -> metodos . programa3
    (4) programa3 -> . metodos programa3
    (5) programa3 -> . programa4
    (8) metodos -> . METODOS funciones
    (6) programa4 -> . setmainloc principal
    (112) setmainloc -> .

    METODOS         shift and go to state 13
    PRINCIPAL       reduce using rule 112 (setmainloc -> .)

    metodos                        shift and go to state 11
    programa3                      shift and go to state 17
    programa4                      shift and go to state 12
    setmainloc                     shift and go to state 14

state 12

    (5) programa3 -> programa4 .

    $end            reduce using rule 5 (programa3 -> programa4 .)


state 13

    (8) metodos -> METODOS . funciones
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    VOID            shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    funciones                      shift and go to state 18
    tipo                           shift and go to state 19

state 14

    (6) programa4 -> setmainloc . principal
    (9) principal -> . PRINCIPAL LPAREN estatutos principal2

    PRINCIPAL       shift and go to state 26

    principal                      shift and go to state 25

state 15

    (2) programa2 -> atributos programa2 .

    $end            reduce using rule 2 (programa2 -> atributos programa2 .)


state 16

    (7) atributos -> ATRIBUTOS addDir . var
    (25) var -> . tipo COLON var2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    var                            shift and go to state 27
    tipo                           shift and go to state 28

state 17

    (4) programa3 -> metodos programa3 .

    $end            reduce using rule 4 (programa3 -> metodos programa3 .)


state 18

    (8) metodos -> METODOS funciones .

    METODOS         reduce using rule 8 (metodos -> METODOS funciones .)
    PRINCIPAL       reduce using rule 8 (metodos -> METODOS funciones .)


state 19

    (12) funciones -> tipo . funciones2
    (14) funciones2 -> . FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> . FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> . FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3

    FUNCION         shift and go to state 30

    funciones2                     shift and go to state 29

state 20

    (13) funciones -> VOID . funciones2
    (14) funciones2 -> . FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> . FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> . FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3

    FUNCION         shift and go to state 30

    funciones2                     shift and go to state 31

state 21

    (33) tipo -> INT .

    FUNCION         reduce using rule 33 (tipo -> INT .)
    COLON           reduce using rule 33 (tipo -> INT .)
    ID              reduce using rule 33 (tipo -> INT .)


state 22

    (34) tipo -> FLOAT .

    FUNCION         reduce using rule 34 (tipo -> FLOAT .)
    COLON           reduce using rule 34 (tipo -> FLOAT .)
    ID              reduce using rule 34 (tipo -> FLOAT .)


state 23

    (35) tipo -> CHAR .

    FUNCION         reduce using rule 35 (tipo -> CHAR .)
    COLON           reduce using rule 35 (tipo -> CHAR .)
    ID              reduce using rule 35 (tipo -> CHAR .)


state 24

    (36) tipo -> BOOL .

    FUNCION         reduce using rule 36 (tipo -> BOOL .)
    COLON           reduce using rule 36 (tipo -> BOOL .)
    ID              reduce using rule 36 (tipo -> BOOL .)


state 25

    (6) programa4 -> setmainloc principal .

    $end            reduce using rule 6 (programa4 -> setmainloc principal .)


state 26

    (9) principal -> PRINCIPAL . LPAREN estatutos principal2

    LPAREN          shift and go to state 32


state 27

    (7) atributos -> ATRIBUTOS addDir var .

    ATRIBUTOS       reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    METODOS         reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    PRINCIPAL       reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    ID              reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    LEE             reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    ESCRIBIR        reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    IF              reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    WHILE           reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    DO              reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    FOR             reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    VOID            reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    RETURN          reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    INT             reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    FLOAT           reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    CHAR            reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)
    BOOL            reduce using rule 7 (atributos -> ATRIBUTOS addDir var .)


state 28

    (25) var -> tipo . COLON var2

    COLON           shift and go to state 33


state 29

    (12) funciones -> tipo funciones2 .

    METODOS         reduce using rule 12 (funciones -> tipo funciones2 .)
    PRINCIPAL       reduce using rule 12 (funciones -> tipo funciones2 .)
    ID              reduce using rule 12 (funciones -> tipo funciones2 .)
    LEE             reduce using rule 12 (funciones -> tipo funciones2 .)
    ESCRIBIR        reduce using rule 12 (funciones -> tipo funciones2 .)
    IF              reduce using rule 12 (funciones -> tipo funciones2 .)
    WHILE           reduce using rule 12 (funciones -> tipo funciones2 .)
    DO              reduce using rule 12 (funciones -> tipo funciones2 .)
    FOR             reduce using rule 12 (funciones -> tipo funciones2 .)
    VOID            reduce using rule 12 (funciones -> tipo funciones2 .)
    RETURN          reduce using rule 12 (funciones -> tipo funciones2 .)
    INT             reduce using rule 12 (funciones -> tipo funciones2 .)
    FLOAT           reduce using rule 12 (funciones -> tipo funciones2 .)
    CHAR            reduce using rule 12 (funciones -> tipo funciones2 .)
    BOOL            reduce using rule 12 (funciones -> tipo funciones2 .)
    RPAREN          reduce using rule 12 (funciones -> tipo funciones2 .)
    RBRACES         reduce using rule 12 (funciones -> tipo funciones2 .)


state 30

    (14) funciones2 -> FUNCION . ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION . ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION . ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3

    ID              shift and go to state 34


state 31

    (13) funciones -> VOID funciones2 .

    METODOS         reduce using rule 13 (funciones -> VOID funciones2 .)
    PRINCIPAL       reduce using rule 13 (funciones -> VOID funciones2 .)
    ID              reduce using rule 13 (funciones -> VOID funciones2 .)
    LEE             reduce using rule 13 (funciones -> VOID funciones2 .)
    ESCRIBIR        reduce using rule 13 (funciones -> VOID funciones2 .)
    IF              reduce using rule 13 (funciones -> VOID funciones2 .)
    WHILE           reduce using rule 13 (funciones -> VOID funciones2 .)
    DO              reduce using rule 13 (funciones -> VOID funciones2 .)
    FOR             reduce using rule 13 (funciones -> VOID funciones2 .)
    VOID            reduce using rule 13 (funciones -> VOID funciones2 .)
    RETURN          reduce using rule 13 (funciones -> VOID funciones2 .)
    INT             reduce using rule 13 (funciones -> VOID funciones2 .)
    FLOAT           reduce using rule 13 (funciones -> VOID funciones2 .)
    CHAR            reduce using rule 13 (funciones -> VOID funciones2 .)
    BOOL            reduce using rule 13 (funciones -> VOID funciones2 .)
    RPAREN          reduce using rule 13 (funciones -> VOID funciones2 .)
    RBRACES         reduce using rule 13 (funciones -> VOID funciones2 .)


state 32

    (9) principal -> PRINCIPAL LPAREN . estatutos principal2
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 35
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 33

    (25) var -> tipo COLON . var2
    (26) var2 -> . ID setCurrentID addValueVarT var3
    (27) var2 -> . ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4

    ID              shift and go to state 55

    var2                           shift and go to state 54

state 34

    (14) funciones2 -> FUNCION ID . addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID . addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID . addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3
    (97) addDir -> .

    LPAREN          reduce using rule 97 (addDir -> .)

    addDir                         shift and go to state 56

state 35

    (9) principal -> PRINCIPAL LPAREN estatutos . principal2
    (10) principal2 -> . estatutos principal2
    (11) principal2 -> . RPAREN
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    RPAREN          shift and go to state 59
    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 57
    principal2                     shift and go to state 58
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 36

    (69) estatutos -> estatutos2 . estatutos
    (70) estatutos -> estatutos2 .
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LEE resolved as shift
  ! shift/reduce conflict for ESCRIBIR resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    RPAREN          reduce using rule 70 (estatutos -> estatutos2 .)
    RBRACES         reduce using rule 70 (estatutos -> estatutos2 .)
    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

  ! ID              [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! LEE             [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! ESCRIBIR        [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! IF              [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! WHILE           [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! DO              [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! FOR             [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! VOID            [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! RETURN          [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! INT             [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! FLOAT           [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! CHAR            [ reduce using rule 70 (estatutos -> estatutos2 .) ]
  ! BOOL            [ reduce using rule 70 (estatutos -> estatutos2 .) ]

    estatutos2                     shift and go to state 36
    estatutos                      shift and go to state 60
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 37

    (71) estatutos2 -> asigna .

    ID              reduce using rule 71 (estatutos2 -> asigna .)
    LEE             reduce using rule 71 (estatutos2 -> asigna .)
    ESCRIBIR        reduce using rule 71 (estatutos2 -> asigna .)
    IF              reduce using rule 71 (estatutos2 -> asigna .)
    WHILE           reduce using rule 71 (estatutos2 -> asigna .)
    DO              reduce using rule 71 (estatutos2 -> asigna .)
    FOR             reduce using rule 71 (estatutos2 -> asigna .)
    VOID            reduce using rule 71 (estatutos2 -> asigna .)
    RETURN          reduce using rule 71 (estatutos2 -> asigna .)
    INT             reduce using rule 71 (estatutos2 -> asigna .)
    FLOAT           reduce using rule 71 (estatutos2 -> asigna .)
    CHAR            reduce using rule 71 (estatutos2 -> asigna .)
    BOOL            reduce using rule 71 (estatutos2 -> asigna .)
    RPAREN          reduce using rule 71 (estatutos2 -> asigna .)
    RBRACES         reduce using rule 71 (estatutos2 -> asigna .)


state 38

    (72) estatutos2 -> llamada .

    ID              reduce using rule 72 (estatutos2 -> llamada .)
    LEE             reduce using rule 72 (estatutos2 -> llamada .)
    ESCRIBIR        reduce using rule 72 (estatutos2 -> llamada .)
    IF              reduce using rule 72 (estatutos2 -> llamada .)
    WHILE           reduce using rule 72 (estatutos2 -> llamada .)
    DO              reduce using rule 72 (estatutos2 -> llamada .)
    FOR             reduce using rule 72 (estatutos2 -> llamada .)
    VOID            reduce using rule 72 (estatutos2 -> llamada .)
    RETURN          reduce using rule 72 (estatutos2 -> llamada .)
    INT             reduce using rule 72 (estatutos2 -> llamada .)
    FLOAT           reduce using rule 72 (estatutos2 -> llamada .)
    CHAR            reduce using rule 72 (estatutos2 -> llamada .)
    BOOL            reduce using rule 72 (estatutos2 -> llamada .)
    RPAREN          reduce using rule 72 (estatutos2 -> llamada .)
    RBRACES         reduce using rule 72 (estatutos2 -> llamada .)


state 39

    (73) estatutos2 -> lee .

    ID              reduce using rule 73 (estatutos2 -> lee .)
    LEE             reduce using rule 73 (estatutos2 -> lee .)
    ESCRIBIR        reduce using rule 73 (estatutos2 -> lee .)
    IF              reduce using rule 73 (estatutos2 -> lee .)
    WHILE           reduce using rule 73 (estatutos2 -> lee .)
    DO              reduce using rule 73 (estatutos2 -> lee .)
    FOR             reduce using rule 73 (estatutos2 -> lee .)
    VOID            reduce using rule 73 (estatutos2 -> lee .)
    RETURN          reduce using rule 73 (estatutos2 -> lee .)
    INT             reduce using rule 73 (estatutos2 -> lee .)
    FLOAT           reduce using rule 73 (estatutos2 -> lee .)
    CHAR            reduce using rule 73 (estatutos2 -> lee .)
    BOOL            reduce using rule 73 (estatutos2 -> lee .)
    RPAREN          reduce using rule 73 (estatutos2 -> lee .)
    RBRACES         reduce using rule 73 (estatutos2 -> lee .)


state 40

    (74) estatutos2 -> escribe .

    ID              reduce using rule 74 (estatutos2 -> escribe .)
    LEE             reduce using rule 74 (estatutos2 -> escribe .)
    ESCRIBIR        reduce using rule 74 (estatutos2 -> escribe .)
    IF              reduce using rule 74 (estatutos2 -> escribe .)
    WHILE           reduce using rule 74 (estatutos2 -> escribe .)
    DO              reduce using rule 74 (estatutos2 -> escribe .)
    FOR             reduce using rule 74 (estatutos2 -> escribe .)
    VOID            reduce using rule 74 (estatutos2 -> escribe .)
    RETURN          reduce using rule 74 (estatutos2 -> escribe .)
    INT             reduce using rule 74 (estatutos2 -> escribe .)
    FLOAT           reduce using rule 74 (estatutos2 -> escribe .)
    CHAR            reduce using rule 74 (estatutos2 -> escribe .)
    BOOL            reduce using rule 74 (estatutos2 -> escribe .)
    RPAREN          reduce using rule 74 (estatutos2 -> escribe .)
    RBRACES         reduce using rule 74 (estatutos2 -> escribe .)


state 41

    (75) estatutos2 -> condicion .

    ID              reduce using rule 75 (estatutos2 -> condicion .)
    LEE             reduce using rule 75 (estatutos2 -> condicion .)
    ESCRIBIR        reduce using rule 75 (estatutos2 -> condicion .)
    IF              reduce using rule 75 (estatutos2 -> condicion .)
    WHILE           reduce using rule 75 (estatutos2 -> condicion .)
    DO              reduce using rule 75 (estatutos2 -> condicion .)
    FOR             reduce using rule 75 (estatutos2 -> condicion .)
    VOID            reduce using rule 75 (estatutos2 -> condicion .)
    RETURN          reduce using rule 75 (estatutos2 -> condicion .)
    INT             reduce using rule 75 (estatutos2 -> condicion .)
    FLOAT           reduce using rule 75 (estatutos2 -> condicion .)
    CHAR            reduce using rule 75 (estatutos2 -> condicion .)
    BOOL            reduce using rule 75 (estatutos2 -> condicion .)
    RPAREN          reduce using rule 75 (estatutos2 -> condicion .)
    RBRACES         reduce using rule 75 (estatutos2 -> condicion .)


state 42

    (76) estatutos2 -> ciclow .

    ID              reduce using rule 76 (estatutos2 -> ciclow .)
    LEE             reduce using rule 76 (estatutos2 -> ciclow .)
    ESCRIBIR        reduce using rule 76 (estatutos2 -> ciclow .)
    IF              reduce using rule 76 (estatutos2 -> ciclow .)
    WHILE           reduce using rule 76 (estatutos2 -> ciclow .)
    DO              reduce using rule 76 (estatutos2 -> ciclow .)
    FOR             reduce using rule 76 (estatutos2 -> ciclow .)
    VOID            reduce using rule 76 (estatutos2 -> ciclow .)
    RETURN          reduce using rule 76 (estatutos2 -> ciclow .)
    INT             reduce using rule 76 (estatutos2 -> ciclow .)
    FLOAT           reduce using rule 76 (estatutos2 -> ciclow .)
    CHAR            reduce using rule 76 (estatutos2 -> ciclow .)
    BOOL            reduce using rule 76 (estatutos2 -> ciclow .)
    RPAREN          reduce using rule 76 (estatutos2 -> ciclow .)
    RBRACES         reduce using rule 76 (estatutos2 -> ciclow .)


state 43

    (77) estatutos2 -> ciclof .

    ID              reduce using rule 77 (estatutos2 -> ciclof .)
    LEE             reduce using rule 77 (estatutos2 -> ciclof .)
    ESCRIBIR        reduce using rule 77 (estatutos2 -> ciclof .)
    IF              reduce using rule 77 (estatutos2 -> ciclof .)
    WHILE           reduce using rule 77 (estatutos2 -> ciclof .)
    DO              reduce using rule 77 (estatutos2 -> ciclof .)
    FOR             reduce using rule 77 (estatutos2 -> ciclof .)
    VOID            reduce using rule 77 (estatutos2 -> ciclof .)
    RETURN          reduce using rule 77 (estatutos2 -> ciclof .)
    INT             reduce using rule 77 (estatutos2 -> ciclof .)
    FLOAT           reduce using rule 77 (estatutos2 -> ciclof .)
    CHAR            reduce using rule 77 (estatutos2 -> ciclof .)
    BOOL            reduce using rule 77 (estatutos2 -> ciclof .)
    RPAREN          reduce using rule 77 (estatutos2 -> ciclof .)
    RBRACES         reduce using rule 77 (estatutos2 -> ciclof .)


state 44

    (78) estatutos2 -> funciones .

    ID              reduce using rule 78 (estatutos2 -> funciones .)
    LEE             reduce using rule 78 (estatutos2 -> funciones .)
    ESCRIBIR        reduce using rule 78 (estatutos2 -> funciones .)
    IF              reduce using rule 78 (estatutos2 -> funciones .)
    WHILE           reduce using rule 78 (estatutos2 -> funciones .)
    DO              reduce using rule 78 (estatutos2 -> funciones .)
    FOR             reduce using rule 78 (estatutos2 -> funciones .)
    VOID            reduce using rule 78 (estatutos2 -> funciones .)
    RETURN          reduce using rule 78 (estatutos2 -> funciones .)
    INT             reduce using rule 78 (estatutos2 -> funciones .)
    FLOAT           reduce using rule 78 (estatutos2 -> funciones .)
    CHAR            reduce using rule 78 (estatutos2 -> funciones .)
    BOOL            reduce using rule 78 (estatutos2 -> funciones .)
    RPAREN          reduce using rule 78 (estatutos2 -> funciones .)
    RBRACES         reduce using rule 78 (estatutos2 -> funciones .)


state 45

    (79) estatutos2 -> retornar .

    ID              reduce using rule 79 (estatutos2 -> retornar .)
    LEE             reduce using rule 79 (estatutos2 -> retornar .)
    ESCRIBIR        reduce using rule 79 (estatutos2 -> retornar .)
    IF              reduce using rule 79 (estatutos2 -> retornar .)
    WHILE           reduce using rule 79 (estatutos2 -> retornar .)
    DO              reduce using rule 79 (estatutos2 -> retornar .)
    FOR             reduce using rule 79 (estatutos2 -> retornar .)
    VOID            reduce using rule 79 (estatutos2 -> retornar .)
    RETURN          reduce using rule 79 (estatutos2 -> retornar .)
    INT             reduce using rule 79 (estatutos2 -> retornar .)
    FLOAT           reduce using rule 79 (estatutos2 -> retornar .)
    CHAR            reduce using rule 79 (estatutos2 -> retornar .)
    BOOL            reduce using rule 79 (estatutos2 -> retornar .)
    RPAREN          reduce using rule 79 (estatutos2 -> retornar .)
    RBRACES         reduce using rule 79 (estatutos2 -> retornar .)


state 46

    (80) asigna -> ID . EQUALS push_id exp SEMI
    (81) asigna -> ID . EQUALS push_id lee SEMI
    (82) asigna -> ID . LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> ID . callFunc LPAREN exp genParameter llamada2
    (131) callFunc -> .

    EQUALS          shift and go to state 61
    LBRACKET        shift and go to state 62
    LPAREN          reduce using rule 131 (callFunc -> .)

    callFunc                       shift and go to state 63

state 47

    (86) lee -> LEE . LPAREN cuadlee RPAREN

    LPAREN          shift and go to state 64


state 48

    (87) escribe -> ESCRIBIR . LPAREN exp cuadprint escribe2

    LPAREN          shift and go to state 65


state 49

    (90) condicion -> IF . condicion2
    (91) condicion2 -> . LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto
    (92) condicion2 -> . LPAREN exp RPAREN genGTF condicion3 fillGoto

    LPAREN          shift and go to state 67

    condicion2                     shift and go to state 66

state 50

    (94) ciclow -> WHILE . storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (120) storeWhile -> .

    LPAREN          reduce using rule 120 (storeWhile -> .)

    storeWhile                     shift and go to state 68

state 51

    (95) ciclow -> DO . storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (120) storeWhile -> .

    LBRACES         reduce using rule 120 (storeWhile -> .)

    storeWhile                     shift and go to state 69

state 52

    (96) ciclof -> FOR . ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor

    ID              shift and go to state 70


state 53

    (22) retornar -> RETURN . returnFlag LPAREN retornar2
    (115) returnFlag -> .

    LPAREN          reduce using rule 115 (returnFlag -> .)

    returnFlag                     shift and go to state 71

state 54

    (25) var -> tipo COLON var2 .

    ATRIBUTOS       reduce using rule 25 (var -> tipo COLON var2 .)
    METODOS         reduce using rule 25 (var -> tipo COLON var2 .)
    PRINCIPAL       reduce using rule 25 (var -> tipo COLON var2 .)
    ID              reduce using rule 25 (var -> tipo COLON var2 .)
    LEE             reduce using rule 25 (var -> tipo COLON var2 .)
    ESCRIBIR        reduce using rule 25 (var -> tipo COLON var2 .)
    IF              reduce using rule 25 (var -> tipo COLON var2 .)
    WHILE           reduce using rule 25 (var -> tipo COLON var2 .)
    DO              reduce using rule 25 (var -> tipo COLON var2 .)
    FOR             reduce using rule 25 (var -> tipo COLON var2 .)
    VOID            reduce using rule 25 (var -> tipo COLON var2 .)
    RETURN          reduce using rule 25 (var -> tipo COLON var2 .)
    INT             reduce using rule 25 (var -> tipo COLON var2 .)
    FLOAT           reduce using rule 25 (var -> tipo COLON var2 .)
    CHAR            reduce using rule 25 (var -> tipo COLON var2 .)
    BOOL            reduce using rule 25 (var -> tipo COLON var2 .)


state 55

    (26) var2 -> ID . setCurrentID addValueVarT var3
    (27) var2 -> ID . setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4
    (98) setCurrentID -> .

    LBRACKET        reduce using rule 98 (setCurrentID -> .)
    COMMA           reduce using rule 98 (setCurrentID -> .)
    SEMI            reduce using rule 98 (setCurrentID -> .)

    setCurrentID                   shift and go to state 72

state 56

    (14) funciones2 -> FUNCION ID addDir . LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir . LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID addDir . LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3

    LPAREN          shift and go to state 73


state 57

    (10) principal2 -> estatutos . principal2
    (10) principal2 -> . estatutos principal2
    (11) principal2 -> . RPAREN
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    RPAREN          shift and go to state 59
    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 57
    principal2                     shift and go to state 74
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 58

    (9) principal -> PRINCIPAL LPAREN estatutos principal2 .

    $end            reduce using rule 9 (principal -> PRINCIPAL LPAREN estatutos principal2 .)


state 59

    (11) principal2 -> RPAREN .

    $end            reduce using rule 11 (principal2 -> RPAREN .)


state 60

    (69) estatutos -> estatutos2 estatutos .

    RPAREN          reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    ID              reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    LEE             reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    ESCRIBIR        reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    IF              reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    WHILE           reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    DO              reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    FOR             reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    VOID            reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    RETURN          reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    INT             reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    FLOAT           reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    CHAR            reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    BOOL            reduce using rule 69 (estatutos -> estatutos2 estatutos .)
    RBRACES         reduce using rule 69 (estatutos -> estatutos2 estatutos .)


state 61

    (80) asigna -> ID EQUALS . push_id exp SEMI
    (81) asigna -> ID EQUALS . push_id lee SEMI
    (110) push_id -> .

    LEE             reduce using rule 110 (push_id -> .)
    LPAREN          reduce using rule 110 (push_id -> .)
    CTE_I           reduce using rule 110 (push_id -> .)
    CTE_F           reduce using rule 110 (push_id -> .)
    CTE_S           reduce using rule 110 (push_id -> .)
    TRUE            reduce using rule 110 (push_id -> .)
    FALSE           reduce using rule 110 (push_id -> .)
    ID              reduce using rule 110 (push_id -> .)

    push_id                        shift and go to state 75

state 62

    (82) asigna -> ID LBRACKET . agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (139) agregarVar -> .

    LPAREN          reduce using rule 139 (agregarVar -> .)
    CTE_I           reduce using rule 139 (agregarVar -> .)
    CTE_F           reduce using rule 139 (agregarVar -> .)
    CTE_S           reduce using rule 139 (agregarVar -> .)
    TRUE            reduce using rule 139 (agregarVar -> .)
    FALSE           reduce using rule 139 (agregarVar -> .)
    ID              reduce using rule 139 (agregarVar -> .)

    agregarVar                     shift and go to state 76

state 63

    (83) llamada -> ID callFunc . LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 77


state 64

    (86) lee -> LEE LPAREN . cuadlee RPAREN
    (114) cuadlee -> .

    RPAREN          reduce using rule 114 (cuadlee -> .)

    cuadlee                        shift and go to state 78

state 65

    (87) escribe -> ESCRIBIR LPAREN . exp cuadprint escribe2
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 80
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 66

    (90) condicion -> IF condicion2 .

    ID              reduce using rule 90 (condicion -> IF condicion2 .)
    LEE             reduce using rule 90 (condicion -> IF condicion2 .)
    ESCRIBIR        reduce using rule 90 (condicion -> IF condicion2 .)
    IF              reduce using rule 90 (condicion -> IF condicion2 .)
    WHILE           reduce using rule 90 (condicion -> IF condicion2 .)
    DO              reduce using rule 90 (condicion -> IF condicion2 .)
    FOR             reduce using rule 90 (condicion -> IF condicion2 .)
    VOID            reduce using rule 90 (condicion -> IF condicion2 .)
    RETURN          reduce using rule 90 (condicion -> IF condicion2 .)
    INT             reduce using rule 90 (condicion -> IF condicion2 .)
    FLOAT           reduce using rule 90 (condicion -> IF condicion2 .)
    CHAR            reduce using rule 90 (condicion -> IF condicion2 .)
    BOOL            reduce using rule 90 (condicion -> IF condicion2 .)
    RPAREN          reduce using rule 90 (condicion -> IF condicion2 .)
    RBRACES         reduce using rule 90 (condicion -> IF condicion2 .)


state 67

    (91) condicion2 -> LPAREN . exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto
    (92) condicion2 -> LPAREN . exp RPAREN genGTF condicion3 fillGoto
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 93
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 68

    (94) ciclow -> WHILE storeWhile . LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile

    LPAREN          shift and go to state 94


state 69

    (95) ciclow -> DO storeWhile . LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile

    LBRACES         shift and go to state 95


state 70

    (96) ciclof -> FOR ID . addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (123) addForId -> .

    EQUALS          reduce using rule 123 (addForId -> .)

    addForId                       shift and go to state 96

state 71

    (22) retornar -> RETURN returnFlag . LPAREN retornar2

    LPAREN          shift and go to state 97


state 72

    (26) var2 -> ID setCurrentID . addValueVarT var3
    (27) var2 -> ID setCurrentID . addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4
    (99) addValueVarT -> .

    LBRACKET        reduce using rule 99 (addValueVarT -> .)
    COMMA           reduce using rule 99 (addValueVarT -> .)
    SEMI            reduce using rule 99 (addValueVarT -> .)

    addValueVarT                   shift and go to state 98

state 73

    (14) funciones2 -> FUNCION ID addDir LPAREN . addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN . addDir parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID addDir LPAREN . addDir parametros RPAREN addParamCount LBRACES var addContF funciones3
    (97) addDir -> .

    INT             reduce using rule 97 (addDir -> .)
    FLOAT           reduce using rule 97 (addDir -> .)
    CHAR            reduce using rule 97 (addDir -> .)
    BOOL            reduce using rule 97 (addDir -> .)

    addDir                         shift and go to state 99

state 74

    (10) principal2 -> estatutos principal2 .

    $end            reduce using rule 10 (principal2 -> estatutos principal2 .)


state 75

    (80) asigna -> ID EQUALS push_id . exp SEMI
    (81) asigna -> ID EQUALS push_id . lee SEMI
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LEE             shift and go to state 47
    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 100
    lee                            shift and go to state 101
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 76

    (82) asigna -> ID LBRACKET agregarVar . verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (140) verifyAEx -> .

    LPAREN          reduce using rule 140 (verifyAEx -> .)
    CTE_I           reduce using rule 140 (verifyAEx -> .)
    CTE_F           reduce using rule 140 (verifyAEx -> .)
    CTE_S           reduce using rule 140 (verifyAEx -> .)
    TRUE            reduce using rule 140 (verifyAEx -> .)
    FALSE           reduce using rule 140 (verifyAEx -> .)
    ID              reduce using rule 140 (verifyAEx -> .)

    verifyAEx                      shift and go to state 102

state 77

    (83) llamada -> ID callFunc LPAREN . exp genParameter llamada2
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 103
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 78

    (86) lee -> LEE LPAREN cuadlee . RPAREN

    RPAREN          shift and go to state 104


state 79

    (58) f -> LPAREN . addFakeBottom exp RPAREN popFakeBottom
    (100) addFakeBottom -> .

    LPAREN          reduce using rule 100 (addFakeBottom -> .)
    CTE_I           reduce using rule 100 (addFakeBottom -> .)
    CTE_F           reduce using rule 100 (addFakeBottom -> .)
    CTE_S           reduce using rule 100 (addFakeBottom -> .)
    TRUE            reduce using rule 100 (addFakeBottom -> .)
    FALSE           reduce using rule 100 (addFakeBottom -> .)
    ID              reduce using rule 100 (addFakeBottom -> .)

    addFakeBottom                  shift and go to state 105

state 80

    (87) escribe -> ESCRIBIR LPAREN exp . cuadprint escribe2
    (38) exp -> exp . addOL exp
    (113) cuadprint -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 113 (cuadprint -> .)
    RPAREN          reduce using rule 113 (cuadprint -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    cuadprint                      shift and go to state 106
    addOL                          shift and go to state 107

state 81

    (37) exp -> texp . checarexp
    (40) texp -> texp . addOL texp
    (105) checarexp -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
    COMMA           reduce using rule 105 (checarexp -> .)
    RPAREN          reduce using rule 105 (checarexp -> .)
    SEMI            reduce using rule 105 (checarexp -> .)
    TO              reduce using rule 105 (checarexp -> .)
    RBRACKET        reduce using rule 105 (checarexp -> .)
    DO              reduce using rule 105 (checarexp -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

  ! LOR             [ reduce using rule 105 (checarexp -> .) ]
  ! LAND            [ reduce using rule 105 (checarexp -> .) ]

    checarexp                      shift and go to state 110
    addOL                          shift and go to state 111

state 82

    (39) texp -> gexp . checarexp
    (42) gexp -> gexp . gexp2 gexp
    (105) checarexp -> .
    (43) gexp2 -> . LT addO
    (44) gexp2 -> . LE addO
    (45) gexp2 -> . GT addO
    (46) gexp2 -> . GE addO
    (47) gexp2 -> . EQ addO
    (48) gexp2 -> . NE addO

    LOR             reduce using rule 105 (checarexp -> .)
    LAND            reduce using rule 105 (checarexp -> .)
    COMMA           reduce using rule 105 (checarexp -> .)
    RPAREN          reduce using rule 105 (checarexp -> .)
    SEMI            reduce using rule 105 (checarexp -> .)
    TO              reduce using rule 105 (checarexp -> .)
    RBRACKET        reduce using rule 105 (checarexp -> .)
    DO              reduce using rule 105 (checarexp -> .)
    LT              shift and go to state 114
    LE              shift and go to state 115
    GT              shift and go to state 116
    GE              shift and go to state 117
    EQ              shift and go to state 118
    NE              shift and go to state 119

    checarexp                      shift and go to state 112
    gexp2                          shift and go to state 113

state 83

    (41) gexp -> mexp . checarexp
    (50) mexp -> mexp . mexp2
    (105) checarexp -> .
    (51) mexp2 -> . PLUS addO mexp
    (52) mexp2 -> . MINUS addO mexp

    LT              reduce using rule 105 (checarexp -> .)
    LE              reduce using rule 105 (checarexp -> .)
    GT              reduce using rule 105 (checarexp -> .)
    GE              reduce using rule 105 (checarexp -> .)
    EQ              reduce using rule 105 (checarexp -> .)
    NE              reduce using rule 105 (checarexp -> .)
    LOR             reduce using rule 105 (checarexp -> .)
    LAND            reduce using rule 105 (checarexp -> .)
    COMMA           reduce using rule 105 (checarexp -> .)
    RPAREN          reduce using rule 105 (checarexp -> .)
    SEMI            reduce using rule 105 (checarexp -> .)
    TO              reduce using rule 105 (checarexp -> .)
    RBRACKET        reduce using rule 105 (checarexp -> .)
    DO              reduce using rule 105 (checarexp -> .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123

    checarexp                      shift and go to state 120
    mexp2                          shift and go to state 121

state 84

    (49) mexp -> t . checarexp
    (54) t -> t . t2
    (105) checarexp -> .
    (55) t2 -> . MULT addO t
    (56) t2 -> . DIV addO t
    (57) t2 -> . MOD addO t

    PLUS            reduce using rule 105 (checarexp -> .)
    MINUS           reduce using rule 105 (checarexp -> .)
    LT              reduce using rule 105 (checarexp -> .)
    LE              reduce using rule 105 (checarexp -> .)
    GT              reduce using rule 105 (checarexp -> .)
    GE              reduce using rule 105 (checarexp -> .)
    EQ              reduce using rule 105 (checarexp -> .)
    NE              reduce using rule 105 (checarexp -> .)
    LOR             reduce using rule 105 (checarexp -> .)
    LAND            reduce using rule 105 (checarexp -> .)
    COMMA           reduce using rule 105 (checarexp -> .)
    RPAREN          reduce using rule 105 (checarexp -> .)
    SEMI            reduce using rule 105 (checarexp -> .)
    TO              reduce using rule 105 (checarexp -> .)
    RBRACKET        reduce using rule 105 (checarexp -> .)
    DO              reduce using rule 105 (checarexp -> .)
    MULT            shift and go to state 126
    DIV             shift and go to state 127
    MOD             shift and go to state 128

    checarexp                      shift and go to state 124
    t2                             shift and go to state 125

state 85

    (53) t -> f . checarexp
    (105) checarexp -> .

    MULT            reduce using rule 105 (checarexp -> .)
    DIV             reduce using rule 105 (checarexp -> .)
    MOD             reduce using rule 105 (checarexp -> .)
    PLUS            reduce using rule 105 (checarexp -> .)
    MINUS           reduce using rule 105 (checarexp -> .)
    LT              reduce using rule 105 (checarexp -> .)
    LE              reduce using rule 105 (checarexp -> .)
    GT              reduce using rule 105 (checarexp -> .)
    GE              reduce using rule 105 (checarexp -> .)
    EQ              reduce using rule 105 (checarexp -> .)
    NE              reduce using rule 105 (checarexp -> .)
    LOR             reduce using rule 105 (checarexp -> .)
    LAND            reduce using rule 105 (checarexp -> .)
    COMMA           reduce using rule 105 (checarexp -> .)
    RPAREN          reduce using rule 105 (checarexp -> .)
    SEMI            reduce using rule 105 (checarexp -> .)
    TO              reduce using rule 105 (checarexp -> .)
    RBRACKET        reduce using rule 105 (checarexp -> .)
    DO              reduce using rule 105 (checarexp -> .)

    checarexp                      shift and go to state 129

state 86

    (59) f -> CTE_I . addIntType
    (106) addIntType -> .

    MULT            reduce using rule 106 (addIntType -> .)
    DIV             reduce using rule 106 (addIntType -> .)
    MOD             reduce using rule 106 (addIntType -> .)
    PLUS            reduce using rule 106 (addIntType -> .)
    MINUS           reduce using rule 106 (addIntType -> .)
    LT              reduce using rule 106 (addIntType -> .)
    LE              reduce using rule 106 (addIntType -> .)
    GT              reduce using rule 106 (addIntType -> .)
    GE              reduce using rule 106 (addIntType -> .)
    EQ              reduce using rule 106 (addIntType -> .)
    NE              reduce using rule 106 (addIntType -> .)
    LOR             reduce using rule 106 (addIntType -> .)
    LAND            reduce using rule 106 (addIntType -> .)
    COMMA           reduce using rule 106 (addIntType -> .)
    RPAREN          reduce using rule 106 (addIntType -> .)
    SEMI            reduce using rule 106 (addIntType -> .)
    TO              reduce using rule 106 (addIntType -> .)
    RBRACKET        reduce using rule 106 (addIntType -> .)
    DO              reduce using rule 106 (addIntType -> .)

    addIntType                     shift and go to state 130

state 87

    (60) f -> CTE_F . addFloatType
    (107) addFloatType -> .

    MULT            reduce using rule 107 (addFloatType -> .)
    DIV             reduce using rule 107 (addFloatType -> .)
    MOD             reduce using rule 107 (addFloatType -> .)
    PLUS            reduce using rule 107 (addFloatType -> .)
    MINUS           reduce using rule 107 (addFloatType -> .)
    LT              reduce using rule 107 (addFloatType -> .)
    LE              reduce using rule 107 (addFloatType -> .)
    GT              reduce using rule 107 (addFloatType -> .)
    GE              reduce using rule 107 (addFloatType -> .)
    EQ              reduce using rule 107 (addFloatType -> .)
    NE              reduce using rule 107 (addFloatType -> .)
    LOR             reduce using rule 107 (addFloatType -> .)
    LAND            reduce using rule 107 (addFloatType -> .)
    COMMA           reduce using rule 107 (addFloatType -> .)
    RPAREN          reduce using rule 107 (addFloatType -> .)
    SEMI            reduce using rule 107 (addFloatType -> .)
    TO              reduce using rule 107 (addFloatType -> .)
    RBRACKET        reduce using rule 107 (addFloatType -> .)
    DO              reduce using rule 107 (addFloatType -> .)

    addFloatType                   shift and go to state 131

state 88

    (61) f -> CTE_S . addCharType
    (108) addCharType -> .

    MULT            reduce using rule 108 (addCharType -> .)
    DIV             reduce using rule 108 (addCharType -> .)
    MOD             reduce using rule 108 (addCharType -> .)
    PLUS            reduce using rule 108 (addCharType -> .)
    MINUS           reduce using rule 108 (addCharType -> .)
    LT              reduce using rule 108 (addCharType -> .)
    LE              reduce using rule 108 (addCharType -> .)
    GT              reduce using rule 108 (addCharType -> .)
    GE              reduce using rule 108 (addCharType -> .)
    EQ              reduce using rule 108 (addCharType -> .)
    NE              reduce using rule 108 (addCharType -> .)
    LOR             reduce using rule 108 (addCharType -> .)
    LAND            reduce using rule 108 (addCharType -> .)
    COMMA           reduce using rule 108 (addCharType -> .)
    RPAREN          reduce using rule 108 (addCharType -> .)
    SEMI            reduce using rule 108 (addCharType -> .)
    TO              reduce using rule 108 (addCharType -> .)
    RBRACKET        reduce using rule 108 (addCharType -> .)
    DO              reduce using rule 108 (addCharType -> .)

    addCharType                    shift and go to state 132

state 89

    (62) f -> TRUE . addBoolType
    (109) addBoolType -> .

    MULT            reduce using rule 109 (addBoolType -> .)
    DIV             reduce using rule 109 (addBoolType -> .)
    MOD             reduce using rule 109 (addBoolType -> .)
    PLUS            reduce using rule 109 (addBoolType -> .)
    MINUS           reduce using rule 109 (addBoolType -> .)
    LT              reduce using rule 109 (addBoolType -> .)
    LE              reduce using rule 109 (addBoolType -> .)
    GT              reduce using rule 109 (addBoolType -> .)
    GE              reduce using rule 109 (addBoolType -> .)
    EQ              reduce using rule 109 (addBoolType -> .)
    NE              reduce using rule 109 (addBoolType -> .)
    LOR             reduce using rule 109 (addBoolType -> .)
    LAND            reduce using rule 109 (addBoolType -> .)
    COMMA           reduce using rule 109 (addBoolType -> .)
    RPAREN          reduce using rule 109 (addBoolType -> .)
    SEMI            reduce using rule 109 (addBoolType -> .)
    TO              reduce using rule 109 (addBoolType -> .)
    RBRACKET        reduce using rule 109 (addBoolType -> .)
    DO              reduce using rule 109 (addBoolType -> .)

    addBoolType                    shift and go to state 133

state 90

    (63) f -> FALSE . addBoolType
    (109) addBoolType -> .

    MULT            reduce using rule 109 (addBoolType -> .)
    DIV             reduce using rule 109 (addBoolType -> .)
    MOD             reduce using rule 109 (addBoolType -> .)
    PLUS            reduce using rule 109 (addBoolType -> .)
    MINUS           reduce using rule 109 (addBoolType -> .)
    LT              reduce using rule 109 (addBoolType -> .)
    LE              reduce using rule 109 (addBoolType -> .)
    GT              reduce using rule 109 (addBoolType -> .)
    GE              reduce using rule 109 (addBoolType -> .)
    EQ              reduce using rule 109 (addBoolType -> .)
    NE              reduce using rule 109 (addBoolType -> .)
    LOR             reduce using rule 109 (addBoolType -> .)
    LAND            reduce using rule 109 (addBoolType -> .)
    COMMA           reduce using rule 109 (addBoolType -> .)
    RPAREN          reduce using rule 109 (addBoolType -> .)
    SEMI            reduce using rule 109 (addBoolType -> .)
    TO              reduce using rule 109 (addBoolType -> .)
    RBRACKET        reduce using rule 109 (addBoolType -> .)
    DO              reduce using rule 109 (addBoolType -> .)

    addBoolType                    shift and go to state 134

state 91

    (64) f -> llamada .

    MULT            reduce using rule 64 (f -> llamada .)
    DIV             reduce using rule 64 (f -> llamada .)
    MOD             reduce using rule 64 (f -> llamada .)
    PLUS            reduce using rule 64 (f -> llamada .)
    MINUS           reduce using rule 64 (f -> llamada .)
    LT              reduce using rule 64 (f -> llamada .)
    LE              reduce using rule 64 (f -> llamada .)
    GT              reduce using rule 64 (f -> llamada .)
    GE              reduce using rule 64 (f -> llamada .)
    EQ              reduce using rule 64 (f -> llamada .)
    NE              reduce using rule 64 (f -> llamada .)
    LOR             reduce using rule 64 (f -> llamada .)
    LAND            reduce using rule 64 (f -> llamada .)
    COMMA           reduce using rule 64 (f -> llamada .)
    RPAREN          reduce using rule 64 (f -> llamada .)
    SEMI            reduce using rule 64 (f -> llamada .)
    TO              reduce using rule 64 (f -> llamada .)
    RBRACKET        reduce using rule 64 (f -> llamada .)
    DO              reduce using rule 64 (f -> llamada .)


state 92

    (65) f -> ID .
    (66) f -> ID . LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> ID . callFunc LPAREN exp genParameter llamada2
    (131) callFunc -> .

    MULT            reduce using rule 65 (f -> ID .)
    DIV             reduce using rule 65 (f -> ID .)
    MOD             reduce using rule 65 (f -> ID .)
    PLUS            reduce using rule 65 (f -> ID .)
    MINUS           reduce using rule 65 (f -> ID .)
    LT              reduce using rule 65 (f -> ID .)
    LE              reduce using rule 65 (f -> ID .)
    GT              reduce using rule 65 (f -> ID .)
    GE              reduce using rule 65 (f -> ID .)
    EQ              reduce using rule 65 (f -> ID .)
    NE              reduce using rule 65 (f -> ID .)
    LOR             reduce using rule 65 (f -> ID .)
    LAND            reduce using rule 65 (f -> ID .)
    COMMA           reduce using rule 65 (f -> ID .)
    RPAREN          reduce using rule 65 (f -> ID .)
    SEMI            reduce using rule 65 (f -> ID .)
    TO              reduce using rule 65 (f -> ID .)
    RBRACKET        reduce using rule 65 (f -> ID .)
    DO              reduce using rule 65 (f -> ID .)
    LBRACKET        shift and go to state 135
    LPAREN          reduce using rule 131 (callFunc -> .)

    callFunc                       shift and go to state 63

state 93

    (91) condicion2 -> LPAREN exp . RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto
    (92) condicion2 -> LPAREN exp . RPAREN genGTF condicion3 fillGoto
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    RPAREN          shift and go to state 136
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    addOL                          shift and go to state 107

state 94

    (94) ciclow -> WHILE storeWhile LPAREN . exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 137
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 95

    (95) ciclow -> DO storeWhile LBRACES . estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 138
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 96

    (96) ciclof -> FOR ID addForId . EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor

    EQUALS          shift and go to state 139


state 97

    (22) retornar -> RETURN returnFlag LPAREN . retornar2
    (23) retornar2 -> . exp cuadRetornar COMMA retornar2
    (24) retornar2 -> . exp cuadRetornar RPAREN
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    retornar2                      shift and go to state 140
    exp                            shift and go to state 141
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 98

    (26) var2 -> ID setCurrentID addValueVarT . var3
    (27) var2 -> ID setCurrentID addValueVarT . LBRACKET newArray CTE_I setL RANGE CTE_I setL var4
    (28) var3 -> . COMMA var2
    (29) var3 -> . SEMI var
    (30) var3 -> . SEMI

    LBRACKET        shift and go to state 143
    COMMA           shift and go to state 144
    SEMI            shift and go to state 145

    var3                           shift and go to state 142

state 99

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir . parametros RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN addDir . parametros RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID addDir LPAREN addDir . parametros RPAREN addParamCount LBRACES var addContF funciones3
    (20) parametros -> . tipo ID setCurrentID addValueVarT newParamType COMMA parametros
    (21) parametros -> . tipo ID setCurrentID addValueVarT newParamType
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    parametros                     shift and go to state 146
    tipo                           shift and go to state 147

state 100

    (80) asigna -> ID EQUALS push_id exp . SEMI
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    SEMI            shift and go to state 148
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    addOL                          shift and go to state 107

state 101

    (81) asigna -> ID EQUALS push_id lee . SEMI

    SEMI            shift and go to state 149


state 102

    (82) asigna -> ID LBRACKET agregarVar verifyAEx . addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (100) addFakeBottom -> .

    LPAREN          reduce using rule 100 (addFakeBottom -> .)
    CTE_I           reduce using rule 100 (addFakeBottom -> .)
    CTE_F           reduce using rule 100 (addFakeBottom -> .)
    CTE_S           reduce using rule 100 (addFakeBottom -> .)
    TRUE            reduce using rule 100 (addFakeBottom -> .)
    FALSE           reduce using rule 100 (addFakeBottom -> .)
    ID              reduce using rule 100 (addFakeBottom -> .)

    addFakeBottom                  shift and go to state 150

state 103

    (83) llamada -> ID callFunc LPAREN exp . genParameter llamada2
    (38) exp -> exp . addOL exp
    (129) genParameter -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 129 (genParameter -> .)
    RPAREN          reduce using rule 129 (genParameter -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    genParameter                   shift and go to state 151
    addOL                          shift and go to state 107

state 104

    (86) lee -> LEE LPAREN cuadlee RPAREN .

    ID              reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    LEE             reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    ESCRIBIR        reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    IF              reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    WHILE           reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    DO              reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    FOR             reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    VOID            reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    RETURN          reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    INT             reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    FLOAT           reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    CHAR            reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    BOOL            reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    RPAREN          reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    RBRACES         reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)
    SEMI            reduce using rule 86 (lee -> LEE LPAREN cuadlee RPAREN .)


state 105

    (58) f -> LPAREN addFakeBottom . exp RPAREN popFakeBottom
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 152
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 106

    (87) escribe -> ESCRIBIR LPAREN exp cuadprint . escribe2
    (88) escribe2 -> . COMMA exp cuadprint escribe2
    (89) escribe2 -> . RPAREN

    COMMA           shift and go to state 154
    RPAREN          shift and go to state 155

    escribe2                       shift and go to state 153

state 107

    (38) exp -> exp addOL . exp
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 156
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 108

    (103) addOL -> LOR .

    LPAREN          reduce using rule 103 (addOL -> LOR .)
    CTE_I           reduce using rule 103 (addOL -> LOR .)
    CTE_F           reduce using rule 103 (addOL -> LOR .)
    CTE_S           reduce using rule 103 (addOL -> LOR .)
    TRUE            reduce using rule 103 (addOL -> LOR .)
    FALSE           reduce using rule 103 (addOL -> LOR .)
    ID              reduce using rule 103 (addOL -> LOR .)


state 109

    (104) addOL -> LAND .

    LPAREN          reduce using rule 104 (addOL -> LAND .)
    CTE_I           reduce using rule 104 (addOL -> LAND .)
    CTE_F           reduce using rule 104 (addOL -> LAND .)
    CTE_S           reduce using rule 104 (addOL -> LAND .)
    TRUE            reduce using rule 104 (addOL -> LAND .)
    FALSE           reduce using rule 104 (addOL -> LAND .)
    ID              reduce using rule 104 (addOL -> LAND .)


state 110

    (37) exp -> texp checarexp .

    LOR             reduce using rule 37 (exp -> texp checarexp .)
    LAND            reduce using rule 37 (exp -> texp checarexp .)
    COMMA           reduce using rule 37 (exp -> texp checarexp .)
    RPAREN          reduce using rule 37 (exp -> texp checarexp .)
    SEMI            reduce using rule 37 (exp -> texp checarexp .)
    TO              reduce using rule 37 (exp -> texp checarexp .)
    RBRACKET        reduce using rule 37 (exp -> texp checarexp .)
    DO              reduce using rule 37 (exp -> texp checarexp .)


state 111

    (40) texp -> texp addOL . texp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    texp                           shift and go to state 157
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 112

    (39) texp -> gexp checarexp .

    LOR             reduce using rule 39 (texp -> gexp checarexp .)
    LAND            reduce using rule 39 (texp -> gexp checarexp .)
    COMMA           reduce using rule 39 (texp -> gexp checarexp .)
    RPAREN          reduce using rule 39 (texp -> gexp checarexp .)
    SEMI            reduce using rule 39 (texp -> gexp checarexp .)
    TO              reduce using rule 39 (texp -> gexp checarexp .)
    RBRACKET        reduce using rule 39 (texp -> gexp checarexp .)
    DO              reduce using rule 39 (texp -> gexp checarexp .)


state 113

    (42) gexp -> gexp gexp2 . gexp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    gexp                           shift and go to state 158
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 114

    (43) gexp2 -> LT . addO
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 159

state 115

    (44) gexp2 -> LE . addO
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 160

state 116

    (45) gexp2 -> GT . addO
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 161

state 117

    (46) gexp2 -> GE . addO
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 162

state 118

    (47) gexp2 -> EQ . addO
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 163

state 119

    (48) gexp2 -> NE . addO
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 164

state 120

    (41) gexp -> mexp checarexp .

    LT              reduce using rule 41 (gexp -> mexp checarexp .)
    LE              reduce using rule 41 (gexp -> mexp checarexp .)
    GT              reduce using rule 41 (gexp -> mexp checarexp .)
    GE              reduce using rule 41 (gexp -> mexp checarexp .)
    EQ              reduce using rule 41 (gexp -> mexp checarexp .)
    NE              reduce using rule 41 (gexp -> mexp checarexp .)
    LOR             reduce using rule 41 (gexp -> mexp checarexp .)
    LAND            reduce using rule 41 (gexp -> mexp checarexp .)
    COMMA           reduce using rule 41 (gexp -> mexp checarexp .)
    RPAREN          reduce using rule 41 (gexp -> mexp checarexp .)
    SEMI            reduce using rule 41 (gexp -> mexp checarexp .)
    TO              reduce using rule 41 (gexp -> mexp checarexp .)
    RBRACKET        reduce using rule 41 (gexp -> mexp checarexp .)
    DO              reduce using rule 41 (gexp -> mexp checarexp .)


state 121

    (50) mexp -> mexp mexp2 .

    PLUS            reduce using rule 50 (mexp -> mexp mexp2 .)
    MINUS           reduce using rule 50 (mexp -> mexp mexp2 .)
    LT              reduce using rule 50 (mexp -> mexp mexp2 .)
    LE              reduce using rule 50 (mexp -> mexp mexp2 .)
    GT              reduce using rule 50 (mexp -> mexp mexp2 .)
    GE              reduce using rule 50 (mexp -> mexp mexp2 .)
    EQ              reduce using rule 50 (mexp -> mexp mexp2 .)
    NE              reduce using rule 50 (mexp -> mexp mexp2 .)
    LOR             reduce using rule 50 (mexp -> mexp mexp2 .)
    LAND            reduce using rule 50 (mexp -> mexp mexp2 .)
    COMMA           reduce using rule 50 (mexp -> mexp mexp2 .)
    RPAREN          reduce using rule 50 (mexp -> mexp mexp2 .)
    SEMI            reduce using rule 50 (mexp -> mexp mexp2 .)
    TO              reduce using rule 50 (mexp -> mexp mexp2 .)
    RBRACKET        reduce using rule 50 (mexp -> mexp mexp2 .)
    DO              reduce using rule 50 (mexp -> mexp mexp2 .)


state 122

    (51) mexp2 -> PLUS . addO mexp
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 165

state 123

    (52) mexp2 -> MINUS . addO mexp
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 166

state 124

    (49) mexp -> t checarexp .

    PLUS            reduce using rule 49 (mexp -> t checarexp .)
    MINUS           reduce using rule 49 (mexp -> t checarexp .)
    LT              reduce using rule 49 (mexp -> t checarexp .)
    LE              reduce using rule 49 (mexp -> t checarexp .)
    GT              reduce using rule 49 (mexp -> t checarexp .)
    GE              reduce using rule 49 (mexp -> t checarexp .)
    EQ              reduce using rule 49 (mexp -> t checarexp .)
    NE              reduce using rule 49 (mexp -> t checarexp .)
    LOR             reduce using rule 49 (mexp -> t checarexp .)
    LAND            reduce using rule 49 (mexp -> t checarexp .)
    COMMA           reduce using rule 49 (mexp -> t checarexp .)
    RPAREN          reduce using rule 49 (mexp -> t checarexp .)
    SEMI            reduce using rule 49 (mexp -> t checarexp .)
    TO              reduce using rule 49 (mexp -> t checarexp .)
    RBRACKET        reduce using rule 49 (mexp -> t checarexp .)
    DO              reduce using rule 49 (mexp -> t checarexp .)


state 125

    (54) t -> t t2 .

    MULT            reduce using rule 54 (t -> t t2 .)
    DIV             reduce using rule 54 (t -> t t2 .)
    MOD             reduce using rule 54 (t -> t t2 .)
    PLUS            reduce using rule 54 (t -> t t2 .)
    MINUS           reduce using rule 54 (t -> t t2 .)
    LT              reduce using rule 54 (t -> t t2 .)
    LE              reduce using rule 54 (t -> t t2 .)
    GT              reduce using rule 54 (t -> t t2 .)
    GE              reduce using rule 54 (t -> t t2 .)
    EQ              reduce using rule 54 (t -> t t2 .)
    NE              reduce using rule 54 (t -> t t2 .)
    LOR             reduce using rule 54 (t -> t t2 .)
    LAND            reduce using rule 54 (t -> t t2 .)
    COMMA           reduce using rule 54 (t -> t t2 .)
    RPAREN          reduce using rule 54 (t -> t t2 .)
    SEMI            reduce using rule 54 (t -> t t2 .)
    TO              reduce using rule 54 (t -> t t2 .)
    RBRACKET        reduce using rule 54 (t -> t t2 .)
    DO              reduce using rule 54 (t -> t t2 .)


state 126

    (55) t2 -> MULT . addO t
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 167

state 127

    (56) t2 -> DIV . addO t
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 168

state 128

    (57) t2 -> MOD . addO t
    (102) addO -> .

    LPAREN          reduce using rule 102 (addO -> .)
    CTE_I           reduce using rule 102 (addO -> .)
    CTE_F           reduce using rule 102 (addO -> .)
    CTE_S           reduce using rule 102 (addO -> .)
    TRUE            reduce using rule 102 (addO -> .)
    FALSE           reduce using rule 102 (addO -> .)
    ID              reduce using rule 102 (addO -> .)

    addO                           shift and go to state 169

state 129

    (53) t -> f checarexp .

    MULT            reduce using rule 53 (t -> f checarexp .)
    DIV             reduce using rule 53 (t -> f checarexp .)
    MOD             reduce using rule 53 (t -> f checarexp .)
    PLUS            reduce using rule 53 (t -> f checarexp .)
    MINUS           reduce using rule 53 (t -> f checarexp .)
    LT              reduce using rule 53 (t -> f checarexp .)
    LE              reduce using rule 53 (t -> f checarexp .)
    GT              reduce using rule 53 (t -> f checarexp .)
    GE              reduce using rule 53 (t -> f checarexp .)
    EQ              reduce using rule 53 (t -> f checarexp .)
    NE              reduce using rule 53 (t -> f checarexp .)
    LOR             reduce using rule 53 (t -> f checarexp .)
    LAND            reduce using rule 53 (t -> f checarexp .)
    COMMA           reduce using rule 53 (t -> f checarexp .)
    RPAREN          reduce using rule 53 (t -> f checarexp .)
    SEMI            reduce using rule 53 (t -> f checarexp .)
    TO              reduce using rule 53 (t -> f checarexp .)
    RBRACKET        reduce using rule 53 (t -> f checarexp .)
    DO              reduce using rule 53 (t -> f checarexp .)


state 130

    (59) f -> CTE_I addIntType .

    MULT            reduce using rule 59 (f -> CTE_I addIntType .)
    DIV             reduce using rule 59 (f -> CTE_I addIntType .)
    MOD             reduce using rule 59 (f -> CTE_I addIntType .)
    PLUS            reduce using rule 59 (f -> CTE_I addIntType .)
    MINUS           reduce using rule 59 (f -> CTE_I addIntType .)
    LT              reduce using rule 59 (f -> CTE_I addIntType .)
    LE              reduce using rule 59 (f -> CTE_I addIntType .)
    GT              reduce using rule 59 (f -> CTE_I addIntType .)
    GE              reduce using rule 59 (f -> CTE_I addIntType .)
    EQ              reduce using rule 59 (f -> CTE_I addIntType .)
    NE              reduce using rule 59 (f -> CTE_I addIntType .)
    LOR             reduce using rule 59 (f -> CTE_I addIntType .)
    LAND            reduce using rule 59 (f -> CTE_I addIntType .)
    COMMA           reduce using rule 59 (f -> CTE_I addIntType .)
    RPAREN          reduce using rule 59 (f -> CTE_I addIntType .)
    SEMI            reduce using rule 59 (f -> CTE_I addIntType .)
    TO              reduce using rule 59 (f -> CTE_I addIntType .)
    RBRACKET        reduce using rule 59 (f -> CTE_I addIntType .)
    DO              reduce using rule 59 (f -> CTE_I addIntType .)


state 131

    (60) f -> CTE_F addFloatType .

    MULT            reduce using rule 60 (f -> CTE_F addFloatType .)
    DIV             reduce using rule 60 (f -> CTE_F addFloatType .)
    MOD             reduce using rule 60 (f -> CTE_F addFloatType .)
    PLUS            reduce using rule 60 (f -> CTE_F addFloatType .)
    MINUS           reduce using rule 60 (f -> CTE_F addFloatType .)
    LT              reduce using rule 60 (f -> CTE_F addFloatType .)
    LE              reduce using rule 60 (f -> CTE_F addFloatType .)
    GT              reduce using rule 60 (f -> CTE_F addFloatType .)
    GE              reduce using rule 60 (f -> CTE_F addFloatType .)
    EQ              reduce using rule 60 (f -> CTE_F addFloatType .)
    NE              reduce using rule 60 (f -> CTE_F addFloatType .)
    LOR             reduce using rule 60 (f -> CTE_F addFloatType .)
    LAND            reduce using rule 60 (f -> CTE_F addFloatType .)
    COMMA           reduce using rule 60 (f -> CTE_F addFloatType .)
    RPAREN          reduce using rule 60 (f -> CTE_F addFloatType .)
    SEMI            reduce using rule 60 (f -> CTE_F addFloatType .)
    TO              reduce using rule 60 (f -> CTE_F addFloatType .)
    RBRACKET        reduce using rule 60 (f -> CTE_F addFloatType .)
    DO              reduce using rule 60 (f -> CTE_F addFloatType .)


state 132

    (61) f -> CTE_S addCharType .

    MULT            reduce using rule 61 (f -> CTE_S addCharType .)
    DIV             reduce using rule 61 (f -> CTE_S addCharType .)
    MOD             reduce using rule 61 (f -> CTE_S addCharType .)
    PLUS            reduce using rule 61 (f -> CTE_S addCharType .)
    MINUS           reduce using rule 61 (f -> CTE_S addCharType .)
    LT              reduce using rule 61 (f -> CTE_S addCharType .)
    LE              reduce using rule 61 (f -> CTE_S addCharType .)
    GT              reduce using rule 61 (f -> CTE_S addCharType .)
    GE              reduce using rule 61 (f -> CTE_S addCharType .)
    EQ              reduce using rule 61 (f -> CTE_S addCharType .)
    NE              reduce using rule 61 (f -> CTE_S addCharType .)
    LOR             reduce using rule 61 (f -> CTE_S addCharType .)
    LAND            reduce using rule 61 (f -> CTE_S addCharType .)
    COMMA           reduce using rule 61 (f -> CTE_S addCharType .)
    RPAREN          reduce using rule 61 (f -> CTE_S addCharType .)
    SEMI            reduce using rule 61 (f -> CTE_S addCharType .)
    TO              reduce using rule 61 (f -> CTE_S addCharType .)
    RBRACKET        reduce using rule 61 (f -> CTE_S addCharType .)
    DO              reduce using rule 61 (f -> CTE_S addCharType .)


state 133

    (62) f -> TRUE addBoolType .

    MULT            reduce using rule 62 (f -> TRUE addBoolType .)
    DIV             reduce using rule 62 (f -> TRUE addBoolType .)
    MOD             reduce using rule 62 (f -> TRUE addBoolType .)
    PLUS            reduce using rule 62 (f -> TRUE addBoolType .)
    MINUS           reduce using rule 62 (f -> TRUE addBoolType .)
    LT              reduce using rule 62 (f -> TRUE addBoolType .)
    LE              reduce using rule 62 (f -> TRUE addBoolType .)
    GT              reduce using rule 62 (f -> TRUE addBoolType .)
    GE              reduce using rule 62 (f -> TRUE addBoolType .)
    EQ              reduce using rule 62 (f -> TRUE addBoolType .)
    NE              reduce using rule 62 (f -> TRUE addBoolType .)
    LOR             reduce using rule 62 (f -> TRUE addBoolType .)
    LAND            reduce using rule 62 (f -> TRUE addBoolType .)
    COMMA           reduce using rule 62 (f -> TRUE addBoolType .)
    RPAREN          reduce using rule 62 (f -> TRUE addBoolType .)
    SEMI            reduce using rule 62 (f -> TRUE addBoolType .)
    TO              reduce using rule 62 (f -> TRUE addBoolType .)
    RBRACKET        reduce using rule 62 (f -> TRUE addBoolType .)
    DO              reduce using rule 62 (f -> TRUE addBoolType .)


state 134

    (63) f -> FALSE addBoolType .

    MULT            reduce using rule 63 (f -> FALSE addBoolType .)
    DIV             reduce using rule 63 (f -> FALSE addBoolType .)
    MOD             reduce using rule 63 (f -> FALSE addBoolType .)
    PLUS            reduce using rule 63 (f -> FALSE addBoolType .)
    MINUS           reduce using rule 63 (f -> FALSE addBoolType .)
    LT              reduce using rule 63 (f -> FALSE addBoolType .)
    LE              reduce using rule 63 (f -> FALSE addBoolType .)
    GT              reduce using rule 63 (f -> FALSE addBoolType .)
    GE              reduce using rule 63 (f -> FALSE addBoolType .)
    EQ              reduce using rule 63 (f -> FALSE addBoolType .)
    NE              reduce using rule 63 (f -> FALSE addBoolType .)
    LOR             reduce using rule 63 (f -> FALSE addBoolType .)
    LAND            reduce using rule 63 (f -> FALSE addBoolType .)
    COMMA           reduce using rule 63 (f -> FALSE addBoolType .)
    RPAREN          reduce using rule 63 (f -> FALSE addBoolType .)
    SEMI            reduce using rule 63 (f -> FALSE addBoolType .)
    TO              reduce using rule 63 (f -> FALSE addBoolType .)
    RBRACKET        reduce using rule 63 (f -> FALSE addBoolType .)
    DO              reduce using rule 63 (f -> FALSE addBoolType .)


state 135

    (66) f -> ID LBRACKET . agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (139) agregarVar -> .

    LPAREN          reduce using rule 139 (agregarVar -> .)
    CTE_I           reduce using rule 139 (agregarVar -> .)
    CTE_F           reduce using rule 139 (agregarVar -> .)
    CTE_S           reduce using rule 139 (agregarVar -> .)
    TRUE            reduce using rule 139 (agregarVar -> .)
    FALSE           reduce using rule 139 (agregarVar -> .)
    ID              reduce using rule 139 (agregarVar -> .)

    agregarVar                     shift and go to state 170

state 136

    (91) condicion2 -> LPAREN exp RPAREN . genGTF condicion3 ELSE genGT condicion3 fillGoto
    (92) condicion2 -> LPAREN exp RPAREN . genGTF condicion3 fillGoto
    (117) genGTF -> .

    LBRACES         reduce using rule 117 (genGTF -> .)

    genGTF                         shift and go to state 171

state 137

    (94) ciclow -> WHILE storeWhile LPAREN exp . RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    RPAREN          shift and go to state 172
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    addOL                          shift and go to state 107

state 138

    (95) ciclow -> DO storeWhile LBRACES estatutos . RBRACES WHILE LPAREN exp RPAREN genDoWhile

    RBRACES         shift and go to state 173


state 139

    (96) ciclof -> FOR ID addForId EQUALS . exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 174
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 140

    (22) retornar -> RETURN returnFlag LPAREN retornar2 .

    ID              reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    LEE             reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    ESCRIBIR        reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    IF              reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    WHILE           reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    DO              reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    FOR             reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    VOID            reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    RETURN          reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    INT             reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    FLOAT           reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    CHAR            reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    BOOL            reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    RPAREN          reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)
    RBRACES         reduce using rule 22 (retornar -> RETURN returnFlag LPAREN retornar2 .)


state 141

    (23) retornar2 -> exp . cuadRetornar COMMA retornar2
    (24) retornar2 -> exp . cuadRetornar RPAREN
    (38) exp -> exp . addOL exp
    (116) cuadRetornar -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 116 (cuadRetornar -> .)
    RPAREN          reduce using rule 116 (cuadRetornar -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    cuadRetornar                   shift and go to state 175
    addOL                          shift and go to state 107

state 142

    (26) var2 -> ID setCurrentID addValueVarT var3 .

    ATRIBUTOS       reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    METODOS         reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    PRINCIPAL       reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    ID              reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    LEE             reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    ESCRIBIR        reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    IF              reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    WHILE           reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    DO              reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    FOR             reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    VOID            reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    RETURN          reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    INT             reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    FLOAT           reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    CHAR            reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)
    BOOL            reduce using rule 26 (var2 -> ID setCurrentID addValueVarT var3 .)


state 143

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET . newArray CTE_I setL RANGE CTE_I setL var4
    (135) newArray -> .

    CTE_I           reduce using rule 135 (newArray -> .)

    newArray                       shift and go to state 176

state 144

    (28) var3 -> COMMA . var2
    (26) var2 -> . ID setCurrentID addValueVarT var3
    (27) var2 -> . ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4

    ID              shift and go to state 55

    var2                           shift and go to state 177

state 145

    (29) var3 -> SEMI . var
    (30) var3 -> SEMI .
    (25) var -> . tipo COLON var2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ATRIBUTOS       reduce using rule 30 (var3 -> SEMI .)
    METODOS         reduce using rule 30 (var3 -> SEMI .)
    PRINCIPAL       reduce using rule 30 (var3 -> SEMI .)
    ID              reduce using rule 30 (var3 -> SEMI .)
    LEE             reduce using rule 30 (var3 -> SEMI .)
    ESCRIBIR        reduce using rule 30 (var3 -> SEMI .)
    IF              reduce using rule 30 (var3 -> SEMI .)
    WHILE           reduce using rule 30 (var3 -> SEMI .)
    DO              reduce using rule 30 (var3 -> SEMI .)
    FOR             reduce using rule 30 (var3 -> SEMI .)
    VOID            reduce using rule 30 (var3 -> SEMI .)
    RETURN          reduce using rule 30 (var3 -> SEMI .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

  ! INT             [ reduce using rule 30 (var3 -> SEMI .) ]
  ! FLOAT           [ reduce using rule 30 (var3 -> SEMI .) ]
  ! CHAR            [ reduce using rule 30 (var3 -> SEMI .) ]
  ! BOOL            [ reduce using rule 30 (var3 -> SEMI .) ]

    var                            shift and go to state 178
    tipo                           shift and go to state 28

state 146

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros . RPAREN addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN addDir parametros . RPAREN addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros . RPAREN addParamCount LBRACES var addContF funciones3

    RPAREN          shift and go to state 179


state 147

    (20) parametros -> tipo . ID setCurrentID addValueVarT newParamType COMMA parametros
    (21) parametros -> tipo . ID setCurrentID addValueVarT newParamType

    ID              shift and go to state 180


state 148

    (80) asigna -> ID EQUALS push_id exp SEMI .

    ID              reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    LEE             reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    ESCRIBIR        reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    IF              reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    WHILE           reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    DO              reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    FOR             reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    VOID            reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    RETURN          reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    INT             reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    FLOAT           reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    CHAR            reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    BOOL            reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    RPAREN          reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)
    RBRACES         reduce using rule 80 (asigna -> ID EQUALS push_id exp SEMI .)


state 149

    (81) asigna -> ID EQUALS push_id lee SEMI .

    ID              reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    LEE             reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    ESCRIBIR        reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    IF              reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    WHILE           reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    DO              reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    FOR             reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    VOID            reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    RETURN          reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    INT             reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    FLOAT           reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    CHAR            reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    BOOL            reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    RPAREN          reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)
    RBRACES         reduce using rule 81 (asigna -> ID EQUALS push_id lee SEMI .)


state 150

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom . exp crearCuadA f2 EQUALS push_id exp SEMI
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 181
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 151

    (83) llamada -> ID callFunc LPAREN exp genParameter . llamada2
    (84) llamada2 -> . COMMA paramCounter exp genParameter llamada2
    (85) llamada2 -> . verLastParam RPAREN
    (133) verLastParam -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 133 (verLastParam -> .)

    llamada2                       shift and go to state 182
    verLastParam                   shift and go to state 184

state 152

    (58) f -> LPAREN addFakeBottom exp . RPAREN popFakeBottom
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    RPAREN          shift and go to state 185
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    addOL                          shift and go to state 107

state 153

    (87) escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .

    ID              reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    LEE             reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    ESCRIBIR        reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    IF              reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    WHILE           reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    DO              reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    FOR             reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    VOID            reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    RETURN          reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    INT             reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    FLOAT           reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    CHAR            reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    BOOL            reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    RPAREN          reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)
    RBRACES         reduce using rule 87 (escribe -> ESCRIBIR LPAREN exp cuadprint escribe2 .)


state 154

    (88) escribe2 -> COMMA . exp cuadprint escribe2
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 186
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 155

    (89) escribe2 -> RPAREN .

    ID              reduce using rule 89 (escribe2 -> RPAREN .)
    LEE             reduce using rule 89 (escribe2 -> RPAREN .)
    ESCRIBIR        reduce using rule 89 (escribe2 -> RPAREN .)
    IF              reduce using rule 89 (escribe2 -> RPAREN .)
    WHILE           reduce using rule 89 (escribe2 -> RPAREN .)
    DO              reduce using rule 89 (escribe2 -> RPAREN .)
    FOR             reduce using rule 89 (escribe2 -> RPAREN .)
    VOID            reduce using rule 89 (escribe2 -> RPAREN .)
    RETURN          reduce using rule 89 (escribe2 -> RPAREN .)
    INT             reduce using rule 89 (escribe2 -> RPAREN .)
    FLOAT           reduce using rule 89 (escribe2 -> RPAREN .)
    CHAR            reduce using rule 89 (escribe2 -> RPAREN .)
    BOOL            reduce using rule 89 (escribe2 -> RPAREN .)
    RPAREN          reduce using rule 89 (escribe2 -> RPAREN .)
    RBRACES         reduce using rule 89 (escribe2 -> RPAREN .)


state 156

    (38) exp -> exp addOL exp .
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
    COMMA           reduce using rule 38 (exp -> exp addOL exp .)
    RPAREN          reduce using rule 38 (exp -> exp addOL exp .)
    SEMI            reduce using rule 38 (exp -> exp addOL exp .)
    TO              reduce using rule 38 (exp -> exp addOL exp .)
    RBRACKET        reduce using rule 38 (exp -> exp addOL exp .)
    DO              reduce using rule 38 (exp -> exp addOL exp .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

  ! LOR             [ reduce using rule 38 (exp -> exp addOL exp .) ]
  ! LAND            [ reduce using rule 38 (exp -> exp addOL exp .) ]

    addOL                          shift and go to state 107

state 157

    (40) texp -> texp addOL texp .
    (40) texp -> texp . addOL texp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

  ! shift/reduce conflict for LOR resolved as shift
  ! shift/reduce conflict for LAND resolved as shift
    COMMA           reduce using rule 40 (texp -> texp addOL texp .)
    RPAREN          reduce using rule 40 (texp -> texp addOL texp .)
    SEMI            reduce using rule 40 (texp -> texp addOL texp .)
    TO              reduce using rule 40 (texp -> texp addOL texp .)
    RBRACKET        reduce using rule 40 (texp -> texp addOL texp .)
    DO              reduce using rule 40 (texp -> texp addOL texp .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

  ! LOR             [ reduce using rule 40 (texp -> texp addOL texp .) ]
  ! LAND            [ reduce using rule 40 (texp -> texp addOL texp .) ]

    addOL                          shift and go to state 111

state 158

    (42) gexp -> gexp gexp2 gexp .
    (42) gexp -> gexp . gexp2 gexp
    (43) gexp2 -> . LT addO
    (44) gexp2 -> . LE addO
    (45) gexp2 -> . GT addO
    (46) gexp2 -> . GE addO
    (47) gexp2 -> . EQ addO
    (48) gexp2 -> . NE addO

  ! shift/reduce conflict for LT resolved as shift
  ! shift/reduce conflict for LE resolved as shift
  ! shift/reduce conflict for GT resolved as shift
  ! shift/reduce conflict for GE resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NE resolved as shift
    LOR             reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    LAND            reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    COMMA           reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    RPAREN          reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    SEMI            reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    TO              reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    RBRACKET        reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    DO              reduce using rule 42 (gexp -> gexp gexp2 gexp .)
    LT              shift and go to state 114
    LE              shift and go to state 115
    GT              shift and go to state 116
    GE              shift and go to state 117
    EQ              shift and go to state 118
    NE              shift and go to state 119

  ! LT              [ reduce using rule 42 (gexp -> gexp gexp2 gexp .) ]
  ! LE              [ reduce using rule 42 (gexp -> gexp gexp2 gexp .) ]
  ! GT              [ reduce using rule 42 (gexp -> gexp gexp2 gexp .) ]
  ! GE              [ reduce using rule 42 (gexp -> gexp gexp2 gexp .) ]
  ! EQ              [ reduce using rule 42 (gexp -> gexp gexp2 gexp .) ]
  ! NE              [ reduce using rule 42 (gexp -> gexp gexp2 gexp .) ]

    gexp2                          shift and go to state 113

state 159

    (43) gexp2 -> LT addO .

    LPAREN          reduce using rule 43 (gexp2 -> LT addO .)
    CTE_I           reduce using rule 43 (gexp2 -> LT addO .)
    CTE_F           reduce using rule 43 (gexp2 -> LT addO .)
    CTE_S           reduce using rule 43 (gexp2 -> LT addO .)
    TRUE            reduce using rule 43 (gexp2 -> LT addO .)
    FALSE           reduce using rule 43 (gexp2 -> LT addO .)
    ID              reduce using rule 43 (gexp2 -> LT addO .)


state 160

    (44) gexp2 -> LE addO .

    LPAREN          reduce using rule 44 (gexp2 -> LE addO .)
    CTE_I           reduce using rule 44 (gexp2 -> LE addO .)
    CTE_F           reduce using rule 44 (gexp2 -> LE addO .)
    CTE_S           reduce using rule 44 (gexp2 -> LE addO .)
    TRUE            reduce using rule 44 (gexp2 -> LE addO .)
    FALSE           reduce using rule 44 (gexp2 -> LE addO .)
    ID              reduce using rule 44 (gexp2 -> LE addO .)


state 161

    (45) gexp2 -> GT addO .

    LPAREN          reduce using rule 45 (gexp2 -> GT addO .)
    CTE_I           reduce using rule 45 (gexp2 -> GT addO .)
    CTE_F           reduce using rule 45 (gexp2 -> GT addO .)
    CTE_S           reduce using rule 45 (gexp2 -> GT addO .)
    TRUE            reduce using rule 45 (gexp2 -> GT addO .)
    FALSE           reduce using rule 45 (gexp2 -> GT addO .)
    ID              reduce using rule 45 (gexp2 -> GT addO .)


state 162

    (46) gexp2 -> GE addO .

    LPAREN          reduce using rule 46 (gexp2 -> GE addO .)
    CTE_I           reduce using rule 46 (gexp2 -> GE addO .)
    CTE_F           reduce using rule 46 (gexp2 -> GE addO .)
    CTE_S           reduce using rule 46 (gexp2 -> GE addO .)
    TRUE            reduce using rule 46 (gexp2 -> GE addO .)
    FALSE           reduce using rule 46 (gexp2 -> GE addO .)
    ID              reduce using rule 46 (gexp2 -> GE addO .)


state 163

    (47) gexp2 -> EQ addO .

    LPAREN          reduce using rule 47 (gexp2 -> EQ addO .)
    CTE_I           reduce using rule 47 (gexp2 -> EQ addO .)
    CTE_F           reduce using rule 47 (gexp2 -> EQ addO .)
    CTE_S           reduce using rule 47 (gexp2 -> EQ addO .)
    TRUE            reduce using rule 47 (gexp2 -> EQ addO .)
    FALSE           reduce using rule 47 (gexp2 -> EQ addO .)
    ID              reduce using rule 47 (gexp2 -> EQ addO .)


state 164

    (48) gexp2 -> NE addO .

    LPAREN          reduce using rule 48 (gexp2 -> NE addO .)
    CTE_I           reduce using rule 48 (gexp2 -> NE addO .)
    CTE_F           reduce using rule 48 (gexp2 -> NE addO .)
    CTE_S           reduce using rule 48 (gexp2 -> NE addO .)
    TRUE            reduce using rule 48 (gexp2 -> NE addO .)
    FALSE           reduce using rule 48 (gexp2 -> NE addO .)
    ID              reduce using rule 48 (gexp2 -> NE addO .)


state 165

    (51) mexp2 -> PLUS addO . mexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    mexp                           shift and go to state 187
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 166

    (52) mexp2 -> MINUS addO . mexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    mexp                           shift and go to state 188
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 167

    (55) t2 -> MULT addO . t
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    t                              shift and go to state 189
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 168

    (56) t2 -> DIV addO . t
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    t                              shift and go to state 190
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 169

    (57) t2 -> MOD addO . t
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    t                              shift and go to state 191
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 170

    (66) f -> ID LBRACKET agregarVar . verifyAEx addFakeBottom exp crearCuadA f2
    (140) verifyAEx -> .

    LPAREN          reduce using rule 140 (verifyAEx -> .)
    CTE_I           reduce using rule 140 (verifyAEx -> .)
    CTE_F           reduce using rule 140 (verifyAEx -> .)
    CTE_S           reduce using rule 140 (verifyAEx -> .)
    TRUE            reduce using rule 140 (verifyAEx -> .)
    FALSE           reduce using rule 140 (verifyAEx -> .)
    ID              reduce using rule 140 (verifyAEx -> .)

    verifyAEx                      shift and go to state 192

state 171

    (91) condicion2 -> LPAREN exp RPAREN genGTF . condicion3 ELSE genGT condicion3 fillGoto
    (92) condicion2 -> LPAREN exp RPAREN genGTF . condicion3 fillGoto
    (93) condicion3 -> . LBRACES estatutos RBRACES

    LBRACES         shift and go to state 194

    condicion3                     shift and go to state 193

state 172

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN . genGTF DO LBRACES estatutos RBRACES fillWhile
    (117) genGTF -> .

    DO              reduce using rule 117 (genGTF -> .)

    genGTF                         shift and go to state 195

state 173

    (95) ciclow -> DO storeWhile LBRACES estatutos RBRACES . WHILE LPAREN exp RPAREN genDoWhile

    WHILE           shift and go to state 196


state 174

    (96) ciclof -> FOR ID addForId EQUALS exp . genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (38) exp -> exp . addOL exp
    (124) genFor -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    TO              reduce using rule 124 (genFor -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    genFor                         shift and go to state 197
    addOL                          shift and go to state 107

state 175

    (23) retornar2 -> exp cuadRetornar . COMMA retornar2
    (24) retornar2 -> exp cuadRetornar . RPAREN

    COMMA           shift and go to state 198
    RPAREN          shift and go to state 199


state 176

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray . CTE_I setL RANGE CTE_I setL var4

    CTE_I           shift and go to state 200


state 177

    (28) var3 -> COMMA var2 .

    ATRIBUTOS       reduce using rule 28 (var3 -> COMMA var2 .)
    METODOS         reduce using rule 28 (var3 -> COMMA var2 .)
    PRINCIPAL       reduce using rule 28 (var3 -> COMMA var2 .)
    ID              reduce using rule 28 (var3 -> COMMA var2 .)
    LEE             reduce using rule 28 (var3 -> COMMA var2 .)
    ESCRIBIR        reduce using rule 28 (var3 -> COMMA var2 .)
    IF              reduce using rule 28 (var3 -> COMMA var2 .)
    WHILE           reduce using rule 28 (var3 -> COMMA var2 .)
    DO              reduce using rule 28 (var3 -> COMMA var2 .)
    FOR             reduce using rule 28 (var3 -> COMMA var2 .)
    VOID            reduce using rule 28 (var3 -> COMMA var2 .)
    RETURN          reduce using rule 28 (var3 -> COMMA var2 .)
    INT             reduce using rule 28 (var3 -> COMMA var2 .)
    FLOAT           reduce using rule 28 (var3 -> COMMA var2 .)
    CHAR            reduce using rule 28 (var3 -> COMMA var2 .)
    BOOL            reduce using rule 28 (var3 -> COMMA var2 .)


state 178

    (29) var3 -> SEMI var .

    ATRIBUTOS       reduce using rule 29 (var3 -> SEMI var .)
    METODOS         reduce using rule 29 (var3 -> SEMI var .)
    PRINCIPAL       reduce using rule 29 (var3 -> SEMI var .)
    ID              reduce using rule 29 (var3 -> SEMI var .)
    LEE             reduce using rule 29 (var3 -> SEMI var .)
    ESCRIBIR        reduce using rule 29 (var3 -> SEMI var .)
    IF              reduce using rule 29 (var3 -> SEMI var .)
    WHILE           reduce using rule 29 (var3 -> SEMI var .)
    DO              reduce using rule 29 (var3 -> SEMI var .)
    FOR             reduce using rule 29 (var3 -> SEMI var .)
    VOID            reduce using rule 29 (var3 -> SEMI var .)
    RETURN          reduce using rule 29 (var3 -> SEMI var .)
    INT             reduce using rule 29 (var3 -> SEMI var .)
    FLOAT           reduce using rule 29 (var3 -> SEMI var .)
    CHAR            reduce using rule 29 (var3 -> SEMI var .)
    BOOL            reduce using rule 29 (var3 -> SEMI var .)


state 179

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN . addParamCount LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN . addParamCount LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN . addParamCount LBRACES var addContF funciones3
    (128) addParamCount -> .

    LBRACES         reduce using rule 128 (addParamCount -> .)

    addParamCount                  shift and go to state 201

state 180

    (20) parametros -> tipo ID . setCurrentID addValueVarT newParamType COMMA parametros
    (21) parametros -> tipo ID . setCurrentID addValueVarT newParamType
    (98) setCurrentID -> .

    COMMA           reduce using rule 98 (setCurrentID -> .)
    RPAREN          reduce using rule 98 (setCurrentID -> .)

    setCurrentID                   shift and go to state 202

state 181

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp . crearCuadA f2 EQUALS push_id exp SEMI
    (38) exp -> exp . addOL exp
    (137) crearCuadA -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 137 (crearCuadA -> .)
    RBRACKET        reduce using rule 137 (crearCuadA -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    crearCuadA                     shift and go to state 203
    addOL                          shift and go to state 107

state 182

    (83) llamada -> ID callFunc LPAREN exp genParameter llamada2 .

    ID              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    LEE             reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    ESCRIBIR        reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    IF              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    WHILE           reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    DO              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    FOR             reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    VOID            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    RETURN          reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    INT             reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    FLOAT           reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    CHAR            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    BOOL            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    RPAREN          reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    RBRACES         reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    MULT            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    DIV             reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    MOD             reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    PLUS            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    MINUS           reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    LT              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    LE              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    GT              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    GE              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    EQ              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    NE              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    LOR             reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    LAND            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    COMMA           reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    SEMI            reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    TO              reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)
    RBRACKET        reduce using rule 83 (llamada -> ID callFunc LPAREN exp genParameter llamada2 .)


state 183

    (84) llamada2 -> COMMA . paramCounter exp genParameter llamada2
    (132) paramCounter -> .

    LPAREN          reduce using rule 132 (paramCounter -> .)
    CTE_I           reduce using rule 132 (paramCounter -> .)
    CTE_F           reduce using rule 132 (paramCounter -> .)
    CTE_S           reduce using rule 132 (paramCounter -> .)
    TRUE            reduce using rule 132 (paramCounter -> .)
    FALSE           reduce using rule 132 (paramCounter -> .)
    ID              reduce using rule 132 (paramCounter -> .)

    paramCounter                   shift and go to state 204

state 184

    (85) llamada2 -> verLastParam . RPAREN

    RPAREN          shift and go to state 205


state 185

    (58) f -> LPAREN addFakeBottom exp RPAREN . popFakeBottom
    (101) popFakeBottom -> .

    MULT            reduce using rule 101 (popFakeBottom -> .)
    DIV             reduce using rule 101 (popFakeBottom -> .)
    MOD             reduce using rule 101 (popFakeBottom -> .)
    PLUS            reduce using rule 101 (popFakeBottom -> .)
    MINUS           reduce using rule 101 (popFakeBottom -> .)
    LT              reduce using rule 101 (popFakeBottom -> .)
    LE              reduce using rule 101 (popFakeBottom -> .)
    GT              reduce using rule 101 (popFakeBottom -> .)
    GE              reduce using rule 101 (popFakeBottom -> .)
    EQ              reduce using rule 101 (popFakeBottom -> .)
    NE              reduce using rule 101 (popFakeBottom -> .)
    LOR             reduce using rule 101 (popFakeBottom -> .)
    LAND            reduce using rule 101 (popFakeBottom -> .)
    COMMA           reduce using rule 101 (popFakeBottom -> .)
    RPAREN          reduce using rule 101 (popFakeBottom -> .)
    SEMI            reduce using rule 101 (popFakeBottom -> .)
    TO              reduce using rule 101 (popFakeBottom -> .)
    RBRACKET        reduce using rule 101 (popFakeBottom -> .)
    DO              reduce using rule 101 (popFakeBottom -> .)

    popFakeBottom                  shift and go to state 206

state 186

    (88) escribe2 -> COMMA exp . cuadprint escribe2
    (38) exp -> exp . addOL exp
    (113) cuadprint -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 113 (cuadprint -> .)
    RPAREN          reduce using rule 113 (cuadprint -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    cuadprint                      shift and go to state 207
    addOL                          shift and go to state 107

state 187

    (51) mexp2 -> PLUS addO mexp .
    (50) mexp -> mexp . mexp2
    (51) mexp2 -> . PLUS addO mexp
    (52) mexp2 -> . MINUS addO mexp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LT              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    LE              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    GT              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    GE              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    EQ              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    NE              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    LOR             reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    LAND            reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    COMMA           reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    RPAREN          reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    SEMI            reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    TO              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    RBRACKET        reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    DO              reduce using rule 51 (mexp2 -> PLUS addO mexp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123

  ! PLUS            [ reduce using rule 51 (mexp2 -> PLUS addO mexp .) ]
  ! MINUS           [ reduce using rule 51 (mexp2 -> PLUS addO mexp .) ]

    mexp2                          shift and go to state 121

state 188

    (52) mexp2 -> MINUS addO mexp .
    (50) mexp -> mexp . mexp2
    (51) mexp2 -> . PLUS addO mexp
    (52) mexp2 -> . MINUS addO mexp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LT              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    LE              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    GT              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    GE              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    EQ              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    NE              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    LOR             reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    LAND            reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    COMMA           reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    RPAREN          reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    SEMI            reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    TO              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    RBRACKET        reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    DO              reduce using rule 52 (mexp2 -> MINUS addO mexp .)
    PLUS            shift and go to state 122
    MINUS           shift and go to state 123

  ! PLUS            [ reduce using rule 52 (mexp2 -> MINUS addO mexp .) ]
  ! MINUS           [ reduce using rule 52 (mexp2 -> MINUS addO mexp .) ]

    mexp2                          shift and go to state 121

state 189

    (55) t2 -> MULT addO t .
    (54) t -> t . t2
    (55) t2 -> . MULT addO t
    (56) t2 -> . DIV addO t
    (57) t2 -> . MOD addO t

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            reduce using rule 55 (t2 -> MULT addO t .)
    MINUS           reduce using rule 55 (t2 -> MULT addO t .)
    LT              reduce using rule 55 (t2 -> MULT addO t .)
    LE              reduce using rule 55 (t2 -> MULT addO t .)
    GT              reduce using rule 55 (t2 -> MULT addO t .)
    GE              reduce using rule 55 (t2 -> MULT addO t .)
    EQ              reduce using rule 55 (t2 -> MULT addO t .)
    NE              reduce using rule 55 (t2 -> MULT addO t .)
    LOR             reduce using rule 55 (t2 -> MULT addO t .)
    LAND            reduce using rule 55 (t2 -> MULT addO t .)
    COMMA           reduce using rule 55 (t2 -> MULT addO t .)
    RPAREN          reduce using rule 55 (t2 -> MULT addO t .)
    SEMI            reduce using rule 55 (t2 -> MULT addO t .)
    TO              reduce using rule 55 (t2 -> MULT addO t .)
    RBRACKET        reduce using rule 55 (t2 -> MULT addO t .)
    DO              reduce using rule 55 (t2 -> MULT addO t .)
    MULT            shift and go to state 126
    DIV             shift and go to state 127
    MOD             shift and go to state 128

  ! MULT            [ reduce using rule 55 (t2 -> MULT addO t .) ]
  ! DIV             [ reduce using rule 55 (t2 -> MULT addO t .) ]
  ! MOD             [ reduce using rule 55 (t2 -> MULT addO t .) ]

    t2                             shift and go to state 125

state 190

    (56) t2 -> DIV addO t .
    (54) t -> t . t2
    (55) t2 -> . MULT addO t
    (56) t2 -> . DIV addO t
    (57) t2 -> . MOD addO t

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            reduce using rule 56 (t2 -> DIV addO t .)
    MINUS           reduce using rule 56 (t2 -> DIV addO t .)
    LT              reduce using rule 56 (t2 -> DIV addO t .)
    LE              reduce using rule 56 (t2 -> DIV addO t .)
    GT              reduce using rule 56 (t2 -> DIV addO t .)
    GE              reduce using rule 56 (t2 -> DIV addO t .)
    EQ              reduce using rule 56 (t2 -> DIV addO t .)
    NE              reduce using rule 56 (t2 -> DIV addO t .)
    LOR             reduce using rule 56 (t2 -> DIV addO t .)
    LAND            reduce using rule 56 (t2 -> DIV addO t .)
    COMMA           reduce using rule 56 (t2 -> DIV addO t .)
    RPAREN          reduce using rule 56 (t2 -> DIV addO t .)
    SEMI            reduce using rule 56 (t2 -> DIV addO t .)
    TO              reduce using rule 56 (t2 -> DIV addO t .)
    RBRACKET        reduce using rule 56 (t2 -> DIV addO t .)
    DO              reduce using rule 56 (t2 -> DIV addO t .)
    MULT            shift and go to state 126
    DIV             shift and go to state 127
    MOD             shift and go to state 128

  ! MULT            [ reduce using rule 56 (t2 -> DIV addO t .) ]
  ! DIV             [ reduce using rule 56 (t2 -> DIV addO t .) ]
  ! MOD             [ reduce using rule 56 (t2 -> DIV addO t .) ]

    t2                             shift and go to state 125

state 191

    (57) t2 -> MOD addO t .
    (54) t -> t . t2
    (55) t2 -> . MULT addO t
    (56) t2 -> . DIV addO t
    (57) t2 -> . MOD addO t

  ! shift/reduce conflict for MULT resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    PLUS            reduce using rule 57 (t2 -> MOD addO t .)
    MINUS           reduce using rule 57 (t2 -> MOD addO t .)
    LT              reduce using rule 57 (t2 -> MOD addO t .)
    LE              reduce using rule 57 (t2 -> MOD addO t .)
    GT              reduce using rule 57 (t2 -> MOD addO t .)
    GE              reduce using rule 57 (t2 -> MOD addO t .)
    EQ              reduce using rule 57 (t2 -> MOD addO t .)
    NE              reduce using rule 57 (t2 -> MOD addO t .)
    LOR             reduce using rule 57 (t2 -> MOD addO t .)
    LAND            reduce using rule 57 (t2 -> MOD addO t .)
    COMMA           reduce using rule 57 (t2 -> MOD addO t .)
    RPAREN          reduce using rule 57 (t2 -> MOD addO t .)
    SEMI            reduce using rule 57 (t2 -> MOD addO t .)
    TO              reduce using rule 57 (t2 -> MOD addO t .)
    RBRACKET        reduce using rule 57 (t2 -> MOD addO t .)
    DO              reduce using rule 57 (t2 -> MOD addO t .)
    MULT            shift and go to state 126
    DIV             shift and go to state 127
    MOD             shift and go to state 128

  ! MULT            [ reduce using rule 57 (t2 -> MOD addO t .) ]
  ! DIV             [ reduce using rule 57 (t2 -> MOD addO t .) ]
  ! MOD             [ reduce using rule 57 (t2 -> MOD addO t .) ]

    t2                             shift and go to state 125

state 192

    (66) f -> ID LBRACKET agregarVar verifyAEx . addFakeBottom exp crearCuadA f2
    (100) addFakeBottom -> .

    LPAREN          reduce using rule 100 (addFakeBottom -> .)
    CTE_I           reduce using rule 100 (addFakeBottom -> .)
    CTE_F           reduce using rule 100 (addFakeBottom -> .)
    CTE_S           reduce using rule 100 (addFakeBottom -> .)
    TRUE            reduce using rule 100 (addFakeBottom -> .)
    FALSE           reduce using rule 100 (addFakeBottom -> .)
    ID              reduce using rule 100 (addFakeBottom -> .)

    addFakeBottom                  shift and go to state 208

state 193

    (91) condicion2 -> LPAREN exp RPAREN genGTF condicion3 . ELSE genGT condicion3 fillGoto
    (92) condicion2 -> LPAREN exp RPAREN genGTF condicion3 . fillGoto
    (119) fillGoto -> .

    ELSE            shift and go to state 209
    ID              reduce using rule 119 (fillGoto -> .)
    LEE             reduce using rule 119 (fillGoto -> .)
    ESCRIBIR        reduce using rule 119 (fillGoto -> .)
    IF              reduce using rule 119 (fillGoto -> .)
    WHILE           reduce using rule 119 (fillGoto -> .)
    DO              reduce using rule 119 (fillGoto -> .)
    FOR             reduce using rule 119 (fillGoto -> .)
    VOID            reduce using rule 119 (fillGoto -> .)
    RETURN          reduce using rule 119 (fillGoto -> .)
    INT             reduce using rule 119 (fillGoto -> .)
    FLOAT           reduce using rule 119 (fillGoto -> .)
    CHAR            reduce using rule 119 (fillGoto -> .)
    BOOL            reduce using rule 119 (fillGoto -> .)
    RPAREN          reduce using rule 119 (fillGoto -> .)
    RBRACES         reduce using rule 119 (fillGoto -> .)

    fillGoto                       shift and go to state 210

state 194

    (93) condicion3 -> LBRACES . estatutos RBRACES
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 211
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 195

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF . DO LBRACES estatutos RBRACES fillWhile

    DO              shift and go to state 212


state 196

    (95) ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE . LPAREN exp RPAREN genDoWhile

    LPAREN          shift and go to state 213


state 197

    (96) ciclof -> FOR ID addForId EQUALS exp genFor . TO exp compFor DO LBRACES estatutos RBRACES actFor

    TO              shift and go to state 214


state 198

    (23) retornar2 -> exp cuadRetornar COMMA . retornar2
    (23) retornar2 -> . exp cuadRetornar COMMA retornar2
    (24) retornar2 -> . exp cuadRetornar RPAREN
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 141
    retornar2                      shift and go to state 215
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 199

    (24) retornar2 -> exp cuadRetornar RPAREN .

    ID              reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    LEE             reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    ESCRIBIR        reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    IF              reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    WHILE           reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    DO              reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    FOR             reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    VOID            reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    RETURN          reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    INT             reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    FLOAT           reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    CHAR            reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    BOOL            reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    RPAREN          reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)
    RBRACES         reduce using rule 24 (retornar2 -> exp cuadRetornar RPAREN .)


state 200

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I . setL RANGE CTE_I setL var4
    (134) setL -> .

    RANGE           reduce using rule 134 (setL -> .)

    setL                           shift and go to state 216

state 201

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount . LBRACES addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount . LBRACES addContF funciones3
    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount . LBRACES var addContF funciones3

    LBRACES         shift and go to state 217


state 202

    (20) parametros -> tipo ID setCurrentID . addValueVarT newParamType COMMA parametros
    (21) parametros -> tipo ID setCurrentID . addValueVarT newParamType
    (99) addValueVarT -> .

    COMMA           reduce using rule 99 (addValueVarT -> .)
    RPAREN          reduce using rule 99 (addValueVarT -> .)

    addValueVarT                   shift and go to state 218

state 203

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA . f2 EQUALS push_id exp SEMI
    (67) f2 -> . COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom
    (68) f2 -> . RBRACKET crearCuadB popFakeBottom

    COMMA           shift and go to state 220
    RBRACKET        shift and go to state 221

    f2                             shift and go to state 219

state 204

    (84) llamada2 -> COMMA paramCounter . exp genParameter llamada2
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 222
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 205

    (85) llamada2 -> verLastParam RPAREN .

    ID              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    LEE             reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    ESCRIBIR        reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    IF              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    WHILE           reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    DO              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    FOR             reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    VOID            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    RETURN          reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    INT             reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    FLOAT           reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    CHAR            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    BOOL            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    RPAREN          reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    RBRACES         reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    MULT            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    DIV             reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    MOD             reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    PLUS            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    MINUS           reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    LT              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    LE              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    GT              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    GE              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    EQ              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    NE              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    LOR             reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    LAND            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    COMMA           reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    SEMI            reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    TO              reduce using rule 85 (llamada2 -> verLastParam RPAREN .)
    RBRACKET        reduce using rule 85 (llamada2 -> verLastParam RPAREN .)


state 206

    (58) f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .

    MULT            reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    DIV             reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    MOD             reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    PLUS            reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    MINUS           reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    LT              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    LE              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    GT              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    GE              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    EQ              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    NE              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    LOR             reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    LAND            reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    COMMA           reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    RPAREN          reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    SEMI            reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    TO              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    RBRACKET        reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)
    DO              reduce using rule 58 (f -> LPAREN addFakeBottom exp RPAREN popFakeBottom .)


state 207

    (88) escribe2 -> COMMA exp cuadprint . escribe2
    (88) escribe2 -> . COMMA exp cuadprint escribe2
    (89) escribe2 -> . RPAREN

    COMMA           shift and go to state 154
    RPAREN          shift and go to state 155

    escribe2                       shift and go to state 223

state 208

    (66) f -> ID LBRACKET agregarVar verifyAEx addFakeBottom . exp crearCuadA f2
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 224
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 209

    (91) condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE . genGT condicion3 fillGoto
    (118) genGT -> .

    LBRACES         reduce using rule 118 (genGT -> .)

    genGT                          shift and go to state 225

state 210

    (92) condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .

    ID              reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    LEE             reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    ESCRIBIR        reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    IF              reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    WHILE           reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    DO              reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    FOR             reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    VOID            reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    RETURN          reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    INT             reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    FLOAT           reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    CHAR            reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    BOOL            reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    RPAREN          reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)
    RBRACES         reduce using rule 92 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 fillGoto .)


state 211

    (93) condicion3 -> LBRACES estatutos . RBRACES

    RBRACES         shift and go to state 226


state 212

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO . LBRACES estatutos RBRACES fillWhile

    LBRACES         shift and go to state 227


state 213

    (95) ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN . exp RPAREN genDoWhile
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 228
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 214

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO . exp compFor DO LBRACES estatutos RBRACES actFor
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 229
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 215

    (23) retornar2 -> exp cuadRetornar COMMA retornar2 .

    ID              reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    LEE             reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    ESCRIBIR        reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    IF              reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    WHILE           reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    DO              reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    FOR             reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    VOID            reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    RETURN          reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    INT             reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    FLOAT           reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    CHAR            reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    BOOL            reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    RPAREN          reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)
    RBRACES         reduce using rule 23 (retornar2 -> exp cuadRetornar COMMA retornar2 .)


state 216

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL . RANGE CTE_I setL var4

    RANGE           shift and go to state 230


state 217

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES . addContF atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES . addContF funciones3
    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES . var addContF funciones3
    (130) addContF -> .
    (25) var -> . tipo COLON var2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    ATRIBUTOS       reduce using rule 130 (addContF -> .)
    ID              reduce using rule 130 (addContF -> .)
    LEE             reduce using rule 130 (addContF -> .)
    ESCRIBIR        reduce using rule 130 (addContF -> .)
    IF              reduce using rule 130 (addContF -> .)
    WHILE           reduce using rule 130 (addContF -> .)
    DO              reduce using rule 130 (addContF -> .)
    FOR             reduce using rule 130 (addContF -> .)
    VOID            reduce using rule 130 (addContF -> .)
    RETURN          reduce using rule 130 (addContF -> .)
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

  ! INT             [ reduce using rule 130 (addContF -> .) ]
  ! FLOAT           [ reduce using rule 130 (addContF -> .) ]
  ! CHAR            [ reduce using rule 130 (addContF -> .) ]
  ! BOOL            [ reduce using rule 130 (addContF -> .) ]

    addContF                       shift and go to state 231
    var                            shift and go to state 232
    tipo                           shift and go to state 28

state 218

    (20) parametros -> tipo ID setCurrentID addValueVarT . newParamType COMMA parametros
    (21) parametros -> tipo ID setCurrentID addValueVarT . newParamType
    (127) newParamType -> .

    COMMA           reduce using rule 127 (newParamType -> .)
    RPAREN          reduce using rule 127 (newParamType -> .)

    newParamType                   shift and go to state 233

state 219

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 . EQUALS push_id exp SEMI

    EQUALS          shift and go to state 234


state 220

    (67) f2 -> COMMA . updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom
    (141) updateDim -> .

    LPAREN          reduce using rule 141 (updateDim -> .)
    CTE_I           reduce using rule 141 (updateDim -> .)
    CTE_F           reduce using rule 141 (updateDim -> .)
    CTE_S           reduce using rule 141 (updateDim -> .)
    TRUE            reduce using rule 141 (updateDim -> .)
    FALSE           reduce using rule 141 (updateDim -> .)
    ID              reduce using rule 141 (updateDim -> .)

    updateDim                      shift and go to state 235

state 221

    (68) f2 -> RBRACKET . crearCuadB popFakeBottom
    (138) crearCuadB -> .

    EQUALS          reduce using rule 138 (crearCuadB -> .)
    MULT            reduce using rule 138 (crearCuadB -> .)
    DIV             reduce using rule 138 (crearCuadB -> .)
    MOD             reduce using rule 138 (crearCuadB -> .)
    PLUS            reduce using rule 138 (crearCuadB -> .)
    MINUS           reduce using rule 138 (crearCuadB -> .)
    LT              reduce using rule 138 (crearCuadB -> .)
    LE              reduce using rule 138 (crearCuadB -> .)
    GT              reduce using rule 138 (crearCuadB -> .)
    GE              reduce using rule 138 (crearCuadB -> .)
    EQ              reduce using rule 138 (crearCuadB -> .)
    NE              reduce using rule 138 (crearCuadB -> .)
    LOR             reduce using rule 138 (crearCuadB -> .)
    LAND            reduce using rule 138 (crearCuadB -> .)
    COMMA           reduce using rule 138 (crearCuadB -> .)
    RPAREN          reduce using rule 138 (crearCuadB -> .)
    SEMI            reduce using rule 138 (crearCuadB -> .)
    TO              reduce using rule 138 (crearCuadB -> .)
    RBRACKET        reduce using rule 138 (crearCuadB -> .)
    DO              reduce using rule 138 (crearCuadB -> .)

    crearCuadB                     shift and go to state 236

state 222

    (84) llamada2 -> COMMA paramCounter exp . genParameter llamada2
    (38) exp -> exp . addOL exp
    (129) genParameter -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 129 (genParameter -> .)
    RPAREN          reduce using rule 129 (genParameter -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    genParameter                   shift and go to state 237
    addOL                          shift and go to state 107

state 223

    (88) escribe2 -> COMMA exp cuadprint escribe2 .

    ID              reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    LEE             reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    ESCRIBIR        reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    IF              reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    WHILE           reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    DO              reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    FOR             reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    VOID            reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    RETURN          reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    INT             reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    FLOAT           reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    CHAR            reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    BOOL            reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    RPAREN          reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)
    RBRACES         reduce using rule 88 (escribe2 -> COMMA exp cuadprint escribe2 .)


state 224

    (66) f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp . crearCuadA f2
    (38) exp -> exp . addOL exp
    (137) crearCuadA -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    COMMA           reduce using rule 137 (crearCuadA -> .)
    RBRACKET        reduce using rule 137 (crearCuadA -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    crearCuadA                     shift and go to state 238
    addOL                          shift and go to state 107

state 225

    (91) condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT . condicion3 fillGoto
    (93) condicion3 -> . LBRACES estatutos RBRACES

    LBRACES         shift and go to state 194

    condicion3                     shift and go to state 239

state 226

    (93) condicion3 -> LBRACES estatutos RBRACES .

    ELSE            reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    ID              reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    LEE             reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    ESCRIBIR        reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    IF              reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    WHILE           reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    DO              reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    FOR             reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    VOID            reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    RETURN          reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    INT             reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    FLOAT           reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    CHAR            reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    BOOL            reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    RPAREN          reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)
    RBRACES         reduce using rule 93 (condicion3 -> LBRACES estatutos RBRACES .)


state 227

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES . estatutos RBRACES fillWhile
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 240
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 228

    (95) ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp . RPAREN genDoWhile
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    RPAREN          shift and go to state 241
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    addOL                          shift and go to state 107

state 229

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp . compFor DO LBRACES estatutos RBRACES actFor
    (38) exp -> exp . addOL exp
    (125) compFor -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    DO              reduce using rule 125 (compFor -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    compFor                        shift and go to state 242
    addOL                          shift and go to state 107

state 230

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE . CTE_I setL var4

    CTE_I           shift and go to state 243


state 231

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF . atributos funciones3
    (15) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF . funciones3
    (7) atributos -> . ATRIBUTOS addDir var
    (17) funciones3 -> . estatutos RBRACES addDir funciones
    (18) funciones3 -> . estatutos RBRACES addDir
    (19) funciones3 -> . estatutos funciones3
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ATRIBUTOS       shift and go to state 10
    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    atributos                      shift and go to state 244
    funciones3                     shift and go to state 245
    estatutos                      shift and go to state 246
    funciones                      shift and go to state 44
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 232

    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var . addContF funciones3
    (130) addContF -> .

    ID              reduce using rule 130 (addContF -> .)
    LEE             reduce using rule 130 (addContF -> .)
    ESCRIBIR        reduce using rule 130 (addContF -> .)
    IF              reduce using rule 130 (addContF -> .)
    WHILE           reduce using rule 130 (addContF -> .)
    DO              reduce using rule 130 (addContF -> .)
    FOR             reduce using rule 130 (addContF -> .)
    VOID            reduce using rule 130 (addContF -> .)
    RETURN          reduce using rule 130 (addContF -> .)
    INT             reduce using rule 130 (addContF -> .)
    FLOAT           reduce using rule 130 (addContF -> .)
    CHAR            reduce using rule 130 (addContF -> .)
    BOOL            reduce using rule 130 (addContF -> .)

    addContF                       shift and go to state 247

state 233

    (20) parametros -> tipo ID setCurrentID addValueVarT newParamType . COMMA parametros
    (21) parametros -> tipo ID setCurrentID addValueVarT newParamType .

    COMMA           shift and go to state 248
    RPAREN          reduce using rule 21 (parametros -> tipo ID setCurrentID addValueVarT newParamType .)


state 234

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS . push_id exp SEMI
    (110) push_id -> .

    LPAREN          reduce using rule 110 (push_id -> .)
    CTE_I           reduce using rule 110 (push_id -> .)
    CTE_F           reduce using rule 110 (push_id -> .)
    CTE_S           reduce using rule 110 (push_id -> .)
    TRUE            reduce using rule 110 (push_id -> .)
    FALSE           reduce using rule 110 (push_id -> .)
    ID              reduce using rule 110 (push_id -> .)

    push_id                        shift and go to state 249

state 235

    (67) f2 -> COMMA updateDim . exp crearCuadA RBRACKET crearCuadB popFakeBottom
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 250
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 236

    (68) f2 -> RBRACKET crearCuadB . popFakeBottom
    (101) popFakeBottom -> .

    EQUALS          reduce using rule 101 (popFakeBottom -> .)
    MULT            reduce using rule 101 (popFakeBottom -> .)
    DIV             reduce using rule 101 (popFakeBottom -> .)
    MOD             reduce using rule 101 (popFakeBottom -> .)
    PLUS            reduce using rule 101 (popFakeBottom -> .)
    MINUS           reduce using rule 101 (popFakeBottom -> .)
    LT              reduce using rule 101 (popFakeBottom -> .)
    LE              reduce using rule 101 (popFakeBottom -> .)
    GT              reduce using rule 101 (popFakeBottom -> .)
    GE              reduce using rule 101 (popFakeBottom -> .)
    EQ              reduce using rule 101 (popFakeBottom -> .)
    NE              reduce using rule 101 (popFakeBottom -> .)
    LOR             reduce using rule 101 (popFakeBottom -> .)
    LAND            reduce using rule 101 (popFakeBottom -> .)
    COMMA           reduce using rule 101 (popFakeBottom -> .)
    RPAREN          reduce using rule 101 (popFakeBottom -> .)
    SEMI            reduce using rule 101 (popFakeBottom -> .)
    TO              reduce using rule 101 (popFakeBottom -> .)
    RBRACKET        reduce using rule 101 (popFakeBottom -> .)
    DO              reduce using rule 101 (popFakeBottom -> .)

    popFakeBottom                  shift and go to state 251

state 237

    (84) llamada2 -> COMMA paramCounter exp genParameter . llamada2
    (84) llamada2 -> . COMMA paramCounter exp genParameter llamada2
    (85) llamada2 -> . verLastParam RPAREN
    (133) verLastParam -> .

    COMMA           shift and go to state 183
    RPAREN          reduce using rule 133 (verLastParam -> .)

    llamada2                       shift and go to state 252
    verLastParam                   shift and go to state 184

state 238

    (66) f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA . f2
    (67) f2 -> . COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom
    (68) f2 -> . RBRACKET crearCuadB popFakeBottom

    COMMA           shift and go to state 220
    RBRACKET        shift and go to state 221

    f2                             shift and go to state 253

state 239

    (91) condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 . fillGoto
    (119) fillGoto -> .

    ID              reduce using rule 119 (fillGoto -> .)
    LEE             reduce using rule 119 (fillGoto -> .)
    ESCRIBIR        reduce using rule 119 (fillGoto -> .)
    IF              reduce using rule 119 (fillGoto -> .)
    WHILE           reduce using rule 119 (fillGoto -> .)
    DO              reduce using rule 119 (fillGoto -> .)
    FOR             reduce using rule 119 (fillGoto -> .)
    VOID            reduce using rule 119 (fillGoto -> .)
    RETURN          reduce using rule 119 (fillGoto -> .)
    INT             reduce using rule 119 (fillGoto -> .)
    FLOAT           reduce using rule 119 (fillGoto -> .)
    CHAR            reduce using rule 119 (fillGoto -> .)
    BOOL            reduce using rule 119 (fillGoto -> .)
    RPAREN          reduce using rule 119 (fillGoto -> .)
    RBRACES         reduce using rule 119 (fillGoto -> .)

    fillGoto                       shift and go to state 254

state 240

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos . RBRACES fillWhile

    RBRACES         shift and go to state 255


state 241

    (95) ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN . genDoWhile
    (121) genDoWhile -> .

    ID              reduce using rule 121 (genDoWhile -> .)
    LEE             reduce using rule 121 (genDoWhile -> .)
    ESCRIBIR        reduce using rule 121 (genDoWhile -> .)
    IF              reduce using rule 121 (genDoWhile -> .)
    WHILE           reduce using rule 121 (genDoWhile -> .)
    DO              reduce using rule 121 (genDoWhile -> .)
    FOR             reduce using rule 121 (genDoWhile -> .)
    VOID            reduce using rule 121 (genDoWhile -> .)
    RETURN          reduce using rule 121 (genDoWhile -> .)
    INT             reduce using rule 121 (genDoWhile -> .)
    FLOAT           reduce using rule 121 (genDoWhile -> .)
    CHAR            reduce using rule 121 (genDoWhile -> .)
    BOOL            reduce using rule 121 (genDoWhile -> .)
    RPAREN          reduce using rule 121 (genDoWhile -> .)
    RBRACES         reduce using rule 121 (genDoWhile -> .)

    genDoWhile                     shift and go to state 256

state 242

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor . DO LBRACES estatutos RBRACES actFor

    DO              shift and go to state 257


state 243

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I . setL var4
    (134) setL -> .

    RBRACKET        reduce using rule 134 (setL -> .)
    COMMA           reduce using rule 134 (setL -> .)

    setL                           shift and go to state 258

state 244

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos . funciones3
    (17) funciones3 -> . estatutos RBRACES addDir funciones
    (18) funciones3 -> . estatutos RBRACES addDir
    (19) funciones3 -> . estatutos funciones3
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    funciones3                     shift and go to state 259
    estatutos                      shift and go to state 246
    funciones                      shift and go to state 44
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 245

    (15) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .

    METODOS         reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    PRINCIPAL       reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    ID              reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    LEE             reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    ESCRIBIR        reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    IF              reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    WHILE           reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    DO              reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    FOR             reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    VOID            reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    RETURN          reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    INT             reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    FLOAT           reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    CHAR            reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    BOOL            reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    RPAREN          reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)
    RBRACES         reduce using rule 15 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF funciones3 .)


state 246

    (17) funciones3 -> estatutos . RBRACES addDir funciones
    (18) funciones3 -> estatutos . RBRACES addDir
    (19) funciones3 -> estatutos . funciones3
    (17) funciones3 -> . estatutos RBRACES addDir funciones
    (18) funciones3 -> . estatutos RBRACES addDir
    (19) funciones3 -> . estatutos funciones3
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    RBRACES         shift and go to state 260
    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 246
    funciones                      shift and go to state 44
    funciones3                     shift and go to state 261
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 247

    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF . funciones3
    (17) funciones3 -> . estatutos RBRACES addDir funciones
    (18) funciones3 -> . estatutos RBRACES addDir
    (19) funciones3 -> . estatutos funciones3
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    funciones3                     shift and go to state 262
    estatutos                      shift and go to state 246
    funciones                      shift and go to state 44
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 248

    (20) parametros -> tipo ID setCurrentID addValueVarT newParamType COMMA . parametros
    (20) parametros -> . tipo ID setCurrentID addValueVarT newParamType COMMA parametros
    (21) parametros -> . tipo ID setCurrentID addValueVarT newParamType
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    tipo                           shift and go to state 147
    parametros                     shift and go to state 263

state 249

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id . exp SEMI
    (37) exp -> . texp checarexp
    (38) exp -> . exp addOL exp
    (39) texp -> . gexp checarexp
    (40) texp -> . texp addOL texp
    (41) gexp -> . mexp checarexp
    (42) gexp -> . gexp gexp2 gexp
    (49) mexp -> . t checarexp
    (50) mexp -> . mexp mexp2
    (53) t -> . f checarexp
    (54) t -> . t t2
    (58) f -> . LPAREN addFakeBottom exp RPAREN popFakeBottom
    (59) f -> . CTE_I addIntType
    (60) f -> . CTE_F addFloatType
    (61) f -> . CTE_S addCharType
    (62) f -> . TRUE addBoolType
    (63) f -> . FALSE addBoolType
    (64) f -> . llamada
    (65) f -> . ID
    (66) f -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2

    LPAREN          shift and go to state 79
    CTE_I           shift and go to state 86
    CTE_F           shift and go to state 87
    CTE_S           shift and go to state 88
    TRUE            shift and go to state 89
    FALSE           shift and go to state 90
    ID              shift and go to state 92

    exp                            shift and go to state 264
    texp                           shift and go to state 81
    gexp                           shift and go to state 82
    mexp                           shift and go to state 83
    t                              shift and go to state 84
    f                              shift and go to state 85
    llamada                        shift and go to state 91

state 250

    (67) f2 -> COMMA updateDim exp . crearCuadA RBRACKET crearCuadB popFakeBottom
    (38) exp -> exp . addOL exp
    (137) crearCuadA -> .
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    RBRACKET        reduce using rule 137 (crearCuadA -> .)
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    crearCuadA                     shift and go to state 265
    addOL                          shift and go to state 107

state 251

    (68) f2 -> RBRACKET crearCuadB popFakeBottom .

    EQUALS          reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    MULT            reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    DIV             reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    MOD             reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    PLUS            reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    MINUS           reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    LT              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    LE              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    GT              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    GE              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    EQ              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    NE              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    LOR             reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    LAND            reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    COMMA           reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    RPAREN          reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    SEMI            reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    TO              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    RBRACKET        reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)
    DO              reduce using rule 68 (f2 -> RBRACKET crearCuadB popFakeBottom .)


state 252

    (84) llamada2 -> COMMA paramCounter exp genParameter llamada2 .

    ID              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    LEE             reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    ESCRIBIR        reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    IF              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    WHILE           reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    DO              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    FOR             reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    VOID            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    RETURN          reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    INT             reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    FLOAT           reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    CHAR            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    BOOL            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    RPAREN          reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    RBRACES         reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    MULT            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    DIV             reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    MOD             reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    PLUS            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    MINUS           reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    LT              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    LE              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    GT              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    GE              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    EQ              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    NE              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    LOR             reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    LAND            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    COMMA           reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    SEMI            reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    TO              reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)
    RBRACKET        reduce using rule 84 (llamada2 -> COMMA paramCounter exp genParameter llamada2 .)


state 253

    (66) f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .

    MULT            reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    DIV             reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    MOD             reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    PLUS            reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    MINUS           reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    LT              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    LE              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    GT              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    GE              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    EQ              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    NE              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    LOR             reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    LAND            reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    COMMA           reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    RPAREN          reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    SEMI            reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    TO              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    RBRACKET        reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)
    DO              reduce using rule 66 (f -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 .)


state 254

    (91) condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .

    ID              reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    LEE             reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    ESCRIBIR        reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    IF              reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    WHILE           reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    DO              reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    FOR             reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    VOID            reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    RETURN          reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    INT             reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    FLOAT           reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    CHAR            reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    BOOL            reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    RPAREN          reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)
    RBRACES         reduce using rule 91 (condicion2 -> LPAREN exp RPAREN genGTF condicion3 ELSE genGT condicion3 fillGoto .)


state 255

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES . fillWhile
    (122) fillWhile -> .

    ID              reduce using rule 122 (fillWhile -> .)
    LEE             reduce using rule 122 (fillWhile -> .)
    ESCRIBIR        reduce using rule 122 (fillWhile -> .)
    IF              reduce using rule 122 (fillWhile -> .)
    WHILE           reduce using rule 122 (fillWhile -> .)
    DO              reduce using rule 122 (fillWhile -> .)
    FOR             reduce using rule 122 (fillWhile -> .)
    VOID            reduce using rule 122 (fillWhile -> .)
    RETURN          reduce using rule 122 (fillWhile -> .)
    INT             reduce using rule 122 (fillWhile -> .)
    FLOAT           reduce using rule 122 (fillWhile -> .)
    CHAR            reduce using rule 122 (fillWhile -> .)
    BOOL            reduce using rule 122 (fillWhile -> .)
    RPAREN          reduce using rule 122 (fillWhile -> .)
    RBRACES         reduce using rule 122 (fillWhile -> .)

    fillWhile                      shift and go to state 266

state 256

    (95) ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .

    ID              reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    LEE             reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    ESCRIBIR        reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    IF              reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    WHILE           reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    DO              reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    FOR             reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    VOID            reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    RETURN          reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    INT             reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    FLOAT           reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    CHAR            reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    BOOL            reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    RPAREN          reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)
    RBRACES         reduce using rule 95 (ciclow -> DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile .)


state 257

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO . LBRACES estatutos RBRACES actFor

    LBRACES         shift and go to state 267


state 258

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL . var4
    (31) var4 -> . RBRACKET cerrarNodes var3
    (32) var4 -> . COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3

    RBRACKET        shift and go to state 269
    COMMA           shift and go to state 270

    var4                           shift and go to state 268

state 259

    (14) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .

    METODOS         reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    PRINCIPAL       reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    ID              reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    LEE             reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    ESCRIBIR        reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    IF              reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    WHILE           reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    DO              reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    FOR             reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    VOID            reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    RETURN          reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    INT             reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    FLOAT           reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    CHAR            reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    BOOL            reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    RPAREN          reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)
    RBRACES         reduce using rule 14 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES addContF atributos funciones3 .)


state 260

    (17) funciones3 -> estatutos RBRACES . addDir funciones
    (18) funciones3 -> estatutos RBRACES . addDir
    (97) addDir -> .

    VOID            reduce using rule 97 (addDir -> .)
    INT             reduce using rule 97 (addDir -> .)
    FLOAT           reduce using rule 97 (addDir -> .)
    CHAR            reduce using rule 97 (addDir -> .)
    BOOL            reduce using rule 97 (addDir -> .)
    METODOS         reduce using rule 97 (addDir -> .)
    PRINCIPAL       reduce using rule 97 (addDir -> .)
    ID              reduce using rule 97 (addDir -> .)
    LEE             reduce using rule 97 (addDir -> .)
    ESCRIBIR        reduce using rule 97 (addDir -> .)
    IF              reduce using rule 97 (addDir -> .)
    WHILE           reduce using rule 97 (addDir -> .)
    DO              reduce using rule 97 (addDir -> .)
    FOR             reduce using rule 97 (addDir -> .)
    RETURN          reduce using rule 97 (addDir -> .)
    RPAREN          reduce using rule 97 (addDir -> .)
    RBRACES         reduce using rule 97 (addDir -> .)

    addDir                         shift and go to state 271

state 261

    (19) funciones3 -> estatutos funciones3 .

    METODOS         reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    PRINCIPAL       reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    ID              reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    LEE             reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    ESCRIBIR        reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    IF              reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    WHILE           reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    DO              reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    FOR             reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    VOID            reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    RETURN          reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    INT             reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    FLOAT           reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    CHAR            reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    BOOL            reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    RPAREN          reduce using rule 19 (funciones3 -> estatutos funciones3 .)
    RBRACES         reduce using rule 19 (funciones3 -> estatutos funciones3 .)


state 262

    (16) funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .

    METODOS         reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    PRINCIPAL       reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    ID              reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    LEE             reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    ESCRIBIR        reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    IF              reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    WHILE           reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    DO              reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    FOR             reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    VOID            reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    RETURN          reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    INT             reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    FLOAT           reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    CHAR            reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    BOOL            reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    RPAREN          reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)
    RBRACES         reduce using rule 16 (funciones2 -> FUNCION ID addDir LPAREN addDir parametros RPAREN addParamCount LBRACES var addContF funciones3 .)


state 263

    (20) parametros -> tipo ID setCurrentID addValueVarT newParamType COMMA parametros .

    RPAREN          reduce using rule 20 (parametros -> tipo ID setCurrentID addValueVarT newParamType COMMA parametros .)


state 264

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp . SEMI
    (38) exp -> exp . addOL exp
    (103) addOL -> . LOR
    (104) addOL -> . LAND

    SEMI            shift and go to state 272
    LOR             shift and go to state 108
    LAND            shift and go to state 109

    addOL                          shift and go to state 107

state 265

    (67) f2 -> COMMA updateDim exp crearCuadA . RBRACKET crearCuadB popFakeBottom

    RBRACKET        shift and go to state 273


state 266

    (94) ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .

    ID              reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    LEE             reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    ESCRIBIR        reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    IF              reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    WHILE           reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    DO              reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    FOR             reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    VOID            reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    RETURN          reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    INT             reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    FLOAT           reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    CHAR            reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    BOOL            reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    RPAREN          reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)
    RBRACES         reduce using rule 94 (ciclow -> WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile .)


state 267

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES . estatutos RBRACES actFor
    (69) estatutos -> . estatutos2 estatutos
    (70) estatutos -> . estatutos2
    (71) estatutos2 -> . asigna
    (72) estatutos2 -> . llamada
    (73) estatutos2 -> . lee
    (74) estatutos2 -> . escribe
    (75) estatutos2 -> . condicion
    (76) estatutos2 -> . ciclow
    (77) estatutos2 -> . ciclof
    (78) estatutos2 -> . funciones
    (79) estatutos2 -> . retornar
    (80) asigna -> . ID EQUALS push_id exp SEMI
    (81) asigna -> . ID EQUALS push_id lee SEMI
    (82) asigna -> . ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI
    (83) llamada -> . ID callFunc LPAREN exp genParameter llamada2
    (86) lee -> . LEE LPAREN cuadlee RPAREN
    (87) escribe -> . ESCRIBIR LPAREN exp cuadprint escribe2
    (90) condicion -> . IF condicion2
    (94) ciclow -> . WHILE storeWhile LPAREN exp RPAREN genGTF DO LBRACES estatutos RBRACES fillWhile
    (95) ciclow -> . DO storeWhile LBRACES estatutos RBRACES WHILE LPAREN exp RPAREN genDoWhile
    (96) ciclof -> . FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (22) retornar -> . RETURN returnFlag LPAREN retornar2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

    ID              shift and go to state 46
    LEE             shift and go to state 47
    ESCRIBIR        shift and go to state 48
    IF              shift and go to state 49
    WHILE           shift and go to state 50
    DO              shift and go to state 51
    FOR             shift and go to state 52
    VOID            shift and go to state 20
    RETURN          shift and go to state 53
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

    estatutos                      shift and go to state 274
    estatutos2                     shift and go to state 36
    asigna                         shift and go to state 37
    llamada                        shift and go to state 38
    lee                            shift and go to state 39
    escribe                        shift and go to state 40
    condicion                      shift and go to state 41
    ciclow                         shift and go to state 42
    ciclof                         shift and go to state 43
    funciones                      shift and go to state 44
    retornar                       shift and go to state 45
    tipo                           shift and go to state 19

state 268

    (27) var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .

    ATRIBUTOS       reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    METODOS         reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    PRINCIPAL       reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    ID              reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    LEE             reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    ESCRIBIR        reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    IF              reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    WHILE           reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    DO              reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    FOR             reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    VOID            reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    RETURN          reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    INT             reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    FLOAT           reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    CHAR            reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)
    BOOL            reduce using rule 27 (var2 -> ID setCurrentID addValueVarT LBRACKET newArray CTE_I setL RANGE CTE_I setL var4 .)


state 269

    (31) var4 -> RBRACKET . cerrarNodes var3
    (136) cerrarNodes -> .

    COMMA           reduce using rule 136 (cerrarNodes -> .)
    SEMI            reduce using rule 136 (cerrarNodes -> .)

    cerrarNodes                    shift and go to state 275

state 270

    (32) var4 -> COMMA . increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3
    (142) increaseDim -> .

    CTE_I           reduce using rule 142 (increaseDim -> .)

    increaseDim                    shift and go to state 276

state 271

    (17) funciones3 -> estatutos RBRACES addDir . funciones
    (18) funciones3 -> estatutos RBRACES addDir .
    (12) funciones -> . tipo funciones2
    (13) funciones -> . VOID funciones2
    (33) tipo -> . INT
    (34) tipo -> . FLOAT
    (35) tipo -> . CHAR
    (36) tipo -> . BOOL

  ! shift/reduce conflict for VOID resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
    METODOS         reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    PRINCIPAL       reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    ID              reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    LEE             reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    ESCRIBIR        reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    IF              reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    WHILE           reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    DO              reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    FOR             reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    RETURN          reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    RPAREN          reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    RBRACES         reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .)
    VOID            shift and go to state 20
    INT             shift and go to state 21
    FLOAT           shift and go to state 22
    CHAR            shift and go to state 23
    BOOL            shift and go to state 24

  ! VOID            [ reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .) ]
  ! INT             [ reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .) ]
  ! FLOAT           [ reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .) ]
  ! CHAR            [ reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .) ]
  ! BOOL            [ reduce using rule 18 (funciones3 -> estatutos RBRACES addDir .) ]

    funciones                      shift and go to state 277
    tipo                           shift and go to state 19

state 272

    (82) asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .

    ID              reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    LEE             reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    ESCRIBIR        reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    IF              reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    WHILE           reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    DO              reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    FOR             reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    VOID            reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    RETURN          reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    INT             reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    FLOAT           reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    CHAR            reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    BOOL            reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    RPAREN          reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)
    RBRACES         reduce using rule 82 (asigna -> ID LBRACKET agregarVar verifyAEx addFakeBottom exp crearCuadA f2 EQUALS push_id exp SEMI .)


state 273

    (67) f2 -> COMMA updateDim exp crearCuadA RBRACKET . crearCuadB popFakeBottom
    (138) crearCuadB -> .

    EQUALS          reduce using rule 138 (crearCuadB -> .)
    MULT            reduce using rule 138 (crearCuadB -> .)
    DIV             reduce using rule 138 (crearCuadB -> .)
    MOD             reduce using rule 138 (crearCuadB -> .)
    PLUS            reduce using rule 138 (crearCuadB -> .)
    MINUS           reduce using rule 138 (crearCuadB -> .)
    LT              reduce using rule 138 (crearCuadB -> .)
    LE              reduce using rule 138 (crearCuadB -> .)
    GT              reduce using rule 138 (crearCuadB -> .)
    GE              reduce using rule 138 (crearCuadB -> .)
    EQ              reduce using rule 138 (crearCuadB -> .)
    NE              reduce using rule 138 (crearCuadB -> .)
    LOR             reduce using rule 138 (crearCuadB -> .)
    LAND            reduce using rule 138 (crearCuadB -> .)
    COMMA           reduce using rule 138 (crearCuadB -> .)
    RPAREN          reduce using rule 138 (crearCuadB -> .)
    SEMI            reduce using rule 138 (crearCuadB -> .)
    TO              reduce using rule 138 (crearCuadB -> .)
    RBRACKET        reduce using rule 138 (crearCuadB -> .)
    DO              reduce using rule 138 (crearCuadB -> .)

    crearCuadB                     shift and go to state 278

state 274

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos . RBRACES actFor

    RBRACES         shift and go to state 279


state 275

    (31) var4 -> RBRACKET cerrarNodes . var3
    (28) var3 -> . COMMA var2
    (29) var3 -> . SEMI var
    (30) var3 -> . SEMI

    COMMA           shift and go to state 144
    SEMI            shift and go to state 145

    var3                           shift and go to state 280

state 276

    (32) var4 -> COMMA increaseDim . CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3

    CTE_I           shift and go to state 281


state 277

    (17) funciones3 -> estatutos RBRACES addDir funciones .

    METODOS         reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    PRINCIPAL       reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    ID              reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    LEE             reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    ESCRIBIR        reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    IF              reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    WHILE           reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    DO              reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    FOR             reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    VOID            reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    RETURN          reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    INT             reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    FLOAT           reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    CHAR            reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    BOOL            reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    RPAREN          reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)
    RBRACES         reduce using rule 17 (funciones3 -> estatutos RBRACES addDir funciones .)


state 278

    (67) f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB . popFakeBottom
    (101) popFakeBottom -> .

    EQUALS          reduce using rule 101 (popFakeBottom -> .)
    MULT            reduce using rule 101 (popFakeBottom -> .)
    DIV             reduce using rule 101 (popFakeBottom -> .)
    MOD             reduce using rule 101 (popFakeBottom -> .)
    PLUS            reduce using rule 101 (popFakeBottom -> .)
    MINUS           reduce using rule 101 (popFakeBottom -> .)
    LT              reduce using rule 101 (popFakeBottom -> .)
    LE              reduce using rule 101 (popFakeBottom -> .)
    GT              reduce using rule 101 (popFakeBottom -> .)
    GE              reduce using rule 101 (popFakeBottom -> .)
    EQ              reduce using rule 101 (popFakeBottom -> .)
    NE              reduce using rule 101 (popFakeBottom -> .)
    LOR             reduce using rule 101 (popFakeBottom -> .)
    LAND            reduce using rule 101 (popFakeBottom -> .)
    COMMA           reduce using rule 101 (popFakeBottom -> .)
    RPAREN          reduce using rule 101 (popFakeBottom -> .)
    SEMI            reduce using rule 101 (popFakeBottom -> .)
    TO              reduce using rule 101 (popFakeBottom -> .)
    RBRACKET        reduce using rule 101 (popFakeBottom -> .)
    DO              reduce using rule 101 (popFakeBottom -> .)

    popFakeBottom                  shift and go to state 282

state 279

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES . actFor
    (126) actFor -> .

    ID              reduce using rule 126 (actFor -> .)
    LEE             reduce using rule 126 (actFor -> .)
    ESCRIBIR        reduce using rule 126 (actFor -> .)
    IF              reduce using rule 126 (actFor -> .)
    WHILE           reduce using rule 126 (actFor -> .)
    DO              reduce using rule 126 (actFor -> .)
    FOR             reduce using rule 126 (actFor -> .)
    VOID            reduce using rule 126 (actFor -> .)
    RETURN          reduce using rule 126 (actFor -> .)
    INT             reduce using rule 126 (actFor -> .)
    FLOAT           reduce using rule 126 (actFor -> .)
    CHAR            reduce using rule 126 (actFor -> .)
    BOOL            reduce using rule 126 (actFor -> .)
    RPAREN          reduce using rule 126 (actFor -> .)
    RBRACES         reduce using rule 126 (actFor -> .)

    actFor                         shift and go to state 283

state 280

    (31) var4 -> RBRACKET cerrarNodes var3 .

    ATRIBUTOS       reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    METODOS         reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    PRINCIPAL       reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    ID              reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    LEE             reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    ESCRIBIR        reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    IF              reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    WHILE           reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    DO              reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    FOR             reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    VOID            reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    RETURN          reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    INT             reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    FLOAT           reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    CHAR            reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)
    BOOL            reduce using rule 31 (var4 -> RBRACKET cerrarNodes var3 .)


state 281

    (32) var4 -> COMMA increaseDim CTE_I . setL RANGE CTE_I setL RBRACKET cerrarNodes var3
    (134) setL -> .

    RANGE           reduce using rule 134 (setL -> .)

    setL                           shift and go to state 284

state 282

    (67) f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .

    EQUALS          reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    MULT            reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    DIV             reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    MOD             reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    PLUS            reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    MINUS           reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    LT              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    LE              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    GT              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    GE              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    EQ              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    NE              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    LOR             reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    LAND            reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    COMMA           reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    RPAREN          reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    SEMI            reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    TO              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    RBRACKET        reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)
    DO              reduce using rule 67 (f2 -> COMMA updateDim exp crearCuadA RBRACKET crearCuadB popFakeBottom .)


state 283

    (96) ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .

    ID              reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    LEE             reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    ESCRIBIR        reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    IF              reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    WHILE           reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    DO              reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    FOR             reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    VOID            reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    RETURN          reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    INT             reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    FLOAT           reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    CHAR            reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    BOOL            reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    RPAREN          reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)
    RBRACES         reduce using rule 96 (ciclof -> FOR ID addForId EQUALS exp genFor TO exp compFor DO LBRACES estatutos RBRACES actFor .)


state 284

    (32) var4 -> COMMA increaseDim CTE_I setL . RANGE CTE_I setL RBRACKET cerrarNodes var3

    RANGE           shift and go to state 285


state 285

    (32) var4 -> COMMA increaseDim CTE_I setL RANGE . CTE_I setL RBRACKET cerrarNodes var3

    CTE_I           shift and go to state 286


state 286

    (32) var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I . setL RBRACKET cerrarNodes var3
    (134) setL -> .

    RBRACKET        reduce using rule 134 (setL -> .)

    setL                           shift and go to state 287

state 287

    (32) var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL . RBRACKET cerrarNodes var3

    RBRACKET        shift and go to state 288


state 288

    (32) var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET . cerrarNodes var3
    (136) cerrarNodes -> .

    COMMA           reduce using rule 136 (cerrarNodes -> .)
    SEMI            reduce using rule 136 (cerrarNodes -> .)

    cerrarNodes                    shift and go to state 289

state 289

    (32) var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes . var3
    (28) var3 -> . COMMA var2
    (29) var3 -> . SEMI var
    (30) var3 -> . SEMI

    COMMA           shift and go to state 144
    SEMI            shift and go to state 145

    var3                           shift and go to state 290

state 290

    (32) var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .

    ATRIBUTOS       reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    METODOS         reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    PRINCIPAL       reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    ID              reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    LEE             reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    ESCRIBIR        reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    IF              reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    WHILE           reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    DO              reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    FOR             reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    VOID            reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    RETURN          reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    INT             reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    FLOAT           reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    CHAR            reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)
    BOOL            reduce using rule 32 (var4 -> COMMA increaseDim CTE_I setL RANGE CTE_I setL RBRACKET cerrarNodes var3 .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for LEE in state 36 resolved as shift
WARNING: shift/reduce conflict for ESCRIBIR in state 36 resolved as shift
WARNING: shift/reduce conflict for IF in state 36 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for DO in state 36 resolved as shift
WARNING: shift/reduce conflict for FOR in state 36 resolved as shift
WARNING: shift/reduce conflict for VOID in state 36 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 36 resolved as shift
WARNING: shift/reduce conflict for INT in state 36 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 36 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 36 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 36 resolved as shift
WARNING: shift/reduce conflict for LOR in state 81 resolved as shift
WARNING: shift/reduce conflict for LAND in state 81 resolved as shift
WARNING: shift/reduce conflict for INT in state 145 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 145 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 145 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 145 resolved as shift
WARNING: shift/reduce conflict for LOR in state 156 resolved as shift
WARNING: shift/reduce conflict for LAND in state 156 resolved as shift
WARNING: shift/reduce conflict for LOR in state 157 resolved as shift
WARNING: shift/reduce conflict for LAND in state 157 resolved as shift
WARNING: shift/reduce conflict for LT in state 158 resolved as shift
WARNING: shift/reduce conflict for LE in state 158 resolved as shift
WARNING: shift/reduce conflict for GT in state 158 resolved as shift
WARNING: shift/reduce conflict for GE in state 158 resolved as shift
WARNING: shift/reduce conflict for EQ in state 158 resolved as shift
WARNING: shift/reduce conflict for NE in state 158 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 187 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 187 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 188 resolved as shift
WARNING: shift/reduce conflict for MULT in state 189 resolved as shift
WARNING: shift/reduce conflict for DIV in state 189 resolved as shift
WARNING: shift/reduce conflict for MOD in state 189 resolved as shift
WARNING: shift/reduce conflict for MULT in state 190 resolved as shift
WARNING: shift/reduce conflict for DIV in state 190 resolved as shift
WARNING: shift/reduce conflict for MOD in state 190 resolved as shift
WARNING: shift/reduce conflict for MULT in state 191 resolved as shift
WARNING: shift/reduce conflict for DIV in state 191 resolved as shift
WARNING: shift/reduce conflict for MOD in state 191 resolved as shift
WARNING: shift/reduce conflict for INT in state 217 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 217 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 217 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 217 resolved as shift
WARNING: shift/reduce conflict for VOID in state 271 resolved as shift
WARNING: shift/reduce conflict for INT in state 271 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 271 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 271 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 271 resolved as shift
